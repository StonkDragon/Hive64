/* This file is autogenerated by scripts/decodetree.py.  */

typedef struct {
    int rel;
} arg_decode0;

typedef struct {
    int r1;
} arg_decode1;

typedef struct {
    int cr1;
    int r1;
} arg_decode10;

typedef struct {
    int r1;
    int rel;
} arg_decode11;

typedef struct {
    int r1;
    int imm;
} arg_decode12;

typedef struct {
    int r1;
    int r2;
    int shift;
    int r3;
} arg_decode13;

typedef struct {
    int r1;
    int r2;
    int imm;
} arg_decode14;

typedef struct {
    int r1;
    int r2;
    int start;
    int count;
} arg_decode15;

typedef struct {
    int type;
    int v1;
    int v2;
    int v3;
} arg_decode16;

typedef struct {
    int type;
    int v1;
    int r2;
    int slot;
} arg_decode17;

typedef struct {
    int type;
    int v1;
    int v2;
} arg_decode18;

typedef struct {
    int type;
    int v1;
    int v2;
    int target;
} arg_decode19;

typedef struct {
    int r1;
    int r2;
    int r3;
} arg_decode2;

typedef struct {
    int type;
    int v1;
    int r1;
} arg_decode20;

typedef struct {
    int r1;
    int v1;
    int imm;
} arg_decode21;

typedef struct {
    int r1;
    int v1;
    int r2;
} arg_decode22;

typedef struct {
    int type;
    int v1;
    int v2;
    int cond;
    int v3;
} arg_decode23;

typedef struct {
    int type;
    int v1;
    int v2;
    int check_sign;
} arg_decode24;

typedef struct {
    int type;
    int v1;
    int v2;
    int is_signed;
    int v3;
} arg_decode25;

typedef struct {
    int type;
    int v1;
    int r2;
} arg_decode26;

typedef struct {
    int r1;
    int r2;
    int imm8;
} arg_decode3;

typedef struct {
} arg_decode4;

typedef struct {
    int r1;
    int r2;
} arg_decode5;

typedef struct {
    int r1;
    int r2;
    int to;
    int from;
} arg_decode6;

typedef struct {
    int r1;
    int r2;
    int cond;
    int r3;
} arg_decode7;

typedef struct {
    int rel_override;
    int reg_override;
    int sz;
} arg_decode8;

typedef struct {
    int r2;
    int r3;
} arg_decode9;

typedef arg_decode0 arg_branch;
static bool trans_branch(DisasContext *ctx, arg_branch *a);
typedef arg_decode0 arg_branch_link;
static bool trans_branch_link(DisasContext *ctx, arg_branch_link *a);
typedef arg_decode1 arg_branch_reg;
static bool trans_branch_reg(DisasContext *ctx, arg_branch_reg *a);
typedef arg_decode1 arg_branch_reg_link;
static bool trans_branch_reg_link(DisasContext *ctx, arg_branch_reg_link *a);
typedef arg_decode2 arg_add_reg;
static bool trans_add_reg(DisasContext *ctx, arg_add_reg *a);
typedef arg_decode2 arg_sub_reg;
static bool trans_sub_reg(DisasContext *ctx, arg_sub_reg *a);
typedef arg_decode2 arg_cmp_reg;
static bool trans_cmp_reg(DisasContext *ctx, arg_cmp_reg *a);
typedef arg_decode2 arg_mul_reg;
static bool trans_mul_reg(DisasContext *ctx, arg_mul_reg *a);
typedef arg_decode2 arg_div_reg;
static bool trans_div_reg(DisasContext *ctx, arg_div_reg *a);
typedef arg_decode2 arg_mod_reg;
static bool trans_mod_reg(DisasContext *ctx, arg_mod_reg *a);
typedef arg_decode2 arg_divs_reg;
static bool trans_divs_reg(DisasContext *ctx, arg_divs_reg *a);
typedef arg_decode2 arg_mods_reg;
static bool trans_mods_reg(DisasContext *ctx, arg_mods_reg *a);
typedef arg_decode2 arg_and_reg;
static bool trans_and_reg(DisasContext *ctx, arg_and_reg *a);
typedef arg_decode2 arg_tst_reg;
static bool trans_tst_reg(DisasContext *ctx, arg_tst_reg *a);
typedef arg_decode2 arg_or_reg;
static bool trans_or_reg(DisasContext *ctx, arg_or_reg *a);
typedef arg_decode2 arg_xor_reg;
static bool trans_xor_reg(DisasContext *ctx, arg_xor_reg *a);
typedef arg_decode2 arg_shl_reg;
static bool trans_shl_reg(DisasContext *ctx, arg_shl_reg *a);
typedef arg_decode2 arg_shr_reg;
static bool trans_shr_reg(DisasContext *ctx, arg_shr_reg *a);
typedef arg_decode2 arg_sar_reg;
static bool trans_sar_reg(DisasContext *ctx, arg_sar_reg *a);
typedef arg_decode2 arg_rol_reg;
static bool trans_rol_reg(DisasContext *ctx, arg_rol_reg *a);
typedef arg_decode2 arg_ror_reg;
static bool trans_ror_reg(DisasContext *ctx, arg_ror_reg *a);
typedef arg_decode3 arg_add_imm;
static bool trans_add_imm(DisasContext *ctx, arg_add_imm *a);
typedef arg_decode3 arg_sub_imm;
static bool trans_sub_imm(DisasContext *ctx, arg_sub_imm *a);
typedef arg_decode3 arg_cmp_imm;
static bool trans_cmp_imm(DisasContext *ctx, arg_cmp_imm *a);
typedef arg_decode3 arg_mul_imm;
static bool trans_mul_imm(DisasContext *ctx, arg_mul_imm *a);
typedef arg_decode3 arg_div_imm;
static bool trans_div_imm(DisasContext *ctx, arg_div_imm *a);
typedef arg_decode3 arg_mod_imm;
static bool trans_mod_imm(DisasContext *ctx, arg_mod_imm *a);
typedef arg_decode3 arg_divs_imm;
static bool trans_divs_imm(DisasContext *ctx, arg_divs_imm *a);
typedef arg_decode3 arg_mods_imm;
static bool trans_mods_imm(DisasContext *ctx, arg_mods_imm *a);
typedef arg_decode3 arg_and_imm;
static bool trans_and_imm(DisasContext *ctx, arg_and_imm *a);
typedef arg_decode3 arg_tst_imm;
static bool trans_tst_imm(DisasContext *ctx, arg_tst_imm *a);
typedef arg_decode3 arg_or_imm;
static bool trans_or_imm(DisasContext *ctx, arg_or_imm *a);
typedef arg_decode3 arg_xor_imm;
static bool trans_xor_imm(DisasContext *ctx, arg_xor_imm *a);
typedef arg_decode4 arg_ret;
static bool trans_ret(DisasContext *ctx, arg_ret *a);
typedef arg_decode5 arg_mov;
static bool trans_mov(DisasContext *ctx, arg_mov *a);
typedef arg_decode3 arg_shl_imm;
static bool trans_shl_imm(DisasContext *ctx, arg_shl_imm *a);
typedef arg_decode3 arg_shr_imm;
static bool trans_shr_imm(DisasContext *ctx, arg_shr_imm *a);
typedef arg_decode3 arg_sar_imm;
static bool trans_sar_imm(DisasContext *ctx, arg_sar_imm *a);
typedef arg_decode3 arg_rol_imm;
static bool trans_rol_imm(DisasContext *ctx, arg_rol_imm *a);
typedef arg_decode3 arg_ror_imm;
static bool trans_ror_imm(DisasContext *ctx, arg_ror_imm *a);
typedef arg_decode5 arg_neg;
static bool trans_neg(DisasContext *ctx, arg_neg *a);
typedef arg_decode5 arg_not;
static bool trans_not(DisasContext *ctx, arg_not *a);
typedef arg_decode6 arg_extend;
static bool trans_extend(DisasContext *ctx, arg_extend *a);
typedef arg_decode5 arg_swe;
static bool trans_swe(DisasContext *ctx, arg_swe *a);
typedef arg_decode7 arg_cswap;
static bool trans_cswap(DisasContext *ctx, arg_cswap *a);
typedef arg_decode5 arg_xchg;
static bool trans_xchg(DisasContext *ctx, arg_xchg *a);
typedef arg_decode8 arg_prefix;
static bool trans_prefix(DisasContext *ctx, arg_prefix *a);
typedef arg_decode2 arg_fadd;
static bool trans_fadd(DisasContext *ctx, arg_fadd *a);
typedef arg_decode2 arg_faddi;
static bool trans_faddi(DisasContext *ctx, arg_faddi *a);
typedef arg_decode2 arg_fsub;
static bool trans_fsub(DisasContext *ctx, arg_fsub *a);
typedef arg_decode2 arg_fsubi;
static bool trans_fsubi(DisasContext *ctx, arg_fsubi *a);
typedef arg_decode9 arg_fcmp;
static bool trans_fcmp(DisasContext *ctx, arg_fcmp *a);
typedef arg_decode9 arg_fcmpi;
static bool trans_fcmpi(DisasContext *ctx, arg_fcmpi *a);
typedef arg_decode2 arg_fmul;
static bool trans_fmul(DisasContext *ctx, arg_fmul *a);
typedef arg_decode2 arg_fmuli;
static bool trans_fmuli(DisasContext *ctx, arg_fmuli *a);
typedef arg_decode2 arg_fdiv;
static bool trans_fdiv(DisasContext *ctx, arg_fdiv *a);
typedef arg_decode2 arg_fdivi;
static bool trans_fdivi(DisasContext *ctx, arg_fdivi *a);
typedef arg_decode2 arg_fmod;
static bool trans_fmod(DisasContext *ctx, arg_fmod *a);
typedef arg_decode2 arg_fmodi;
static bool trans_fmodi(DisasContext *ctx, arg_fmodi *a);
typedef arg_decode5 arg_f2i;
static bool trans_f2i(DisasContext *ctx, arg_f2i *a);
typedef arg_decode5 arg_i2f;
static bool trans_i2f(DisasContext *ctx, arg_i2f *a);
typedef arg_decode5 arg_fsin;
static bool trans_fsin(DisasContext *ctx, arg_fsin *a);
typedef arg_decode5 arg_fsini;
static bool trans_fsini(DisasContext *ctx, arg_fsini *a);
typedef arg_decode5 arg_fsqrt;
static bool trans_fsqrt(DisasContext *ctx, arg_fsqrt *a);
typedef arg_decode5 arg_fsqrti;
static bool trans_fsqrti(DisasContext *ctx, arg_fsqrti *a);
typedef arg_decode2 arg_sadd;
static bool trans_sadd(DisasContext *ctx, arg_sadd *a);
typedef arg_decode2 arg_saddi;
static bool trans_saddi(DisasContext *ctx, arg_saddi *a);
typedef arg_decode2 arg_ssub;
static bool trans_ssub(DisasContext *ctx, arg_ssub *a);
typedef arg_decode2 arg_ssubi;
static bool trans_ssubi(DisasContext *ctx, arg_ssubi *a);
typedef arg_decode9 arg_scmp;
static bool trans_scmp(DisasContext *ctx, arg_scmp *a);
typedef arg_decode9 arg_scmpi;
static bool trans_scmpi(DisasContext *ctx, arg_scmpi *a);
typedef arg_decode2 arg_smul;
static bool trans_smul(DisasContext *ctx, arg_smul *a);
typedef arg_decode2 arg_smuli;
static bool trans_smuli(DisasContext *ctx, arg_smuli *a);
typedef arg_decode2 arg_sdiv;
static bool trans_sdiv(DisasContext *ctx, arg_sdiv *a);
typedef arg_decode2 arg_sdivi;
static bool trans_sdivi(DisasContext *ctx, arg_sdivi *a);
typedef arg_decode2 arg_smod;
static bool trans_smod(DisasContext *ctx, arg_smod *a);
typedef arg_decode2 arg_smodi;
static bool trans_smodi(DisasContext *ctx, arg_smodi *a);
typedef arg_decode5 arg_s2i;
static bool trans_s2i(DisasContext *ctx, arg_s2i *a);
typedef arg_decode5 arg_i2s;
static bool trans_i2s(DisasContext *ctx, arg_i2s *a);
typedef arg_decode5 arg_ssin;
static bool trans_ssin(DisasContext *ctx, arg_ssin *a);
typedef arg_decode5 arg_ssini;
static bool trans_ssini(DisasContext *ctx, arg_ssini *a);
typedef arg_decode5 arg_ssqrt;
static bool trans_ssqrt(DisasContext *ctx, arg_ssqrt *a);
typedef arg_decode5 arg_ssqrti;
static bool trans_ssqrti(DisasContext *ctx, arg_ssqrti *a);
typedef arg_decode5 arg_s2f;
static bool trans_s2f(DisasContext *ctx, arg_s2f *a);
typedef arg_decode5 arg_f2s;
static bool trans_f2s(DisasContext *ctx, arg_f2s *a);
typedef arg_decode4 arg_cpuid;
static bool trans_cpuid(DisasContext *ctx, arg_cpuid *a);
typedef arg_decode1 arg_zeroupper;
static bool trans_zeroupper(DisasContext *ctx, arg_zeroupper *a);
typedef arg_decode4 arg_sret;
static bool trans_sret(DisasContext *ctx, arg_sret *a);
typedef arg_decode4 arg_hret;
static bool trans_hret(DisasContext *ctx, arg_hret *a);
typedef arg_decode4 arg_iret;
static bool trans_iret(DisasContext *ctx, arg_iret *a);
typedef arg_decode4 arg_svc;
static bool trans_svc(DisasContext *ctx, arg_svc *a);
typedef arg_decode10 arg_mov_cr_r;
static bool trans_mov_cr_r(DisasContext *ctx, arg_mov_cr_r *a);
typedef arg_decode10 arg_mov_r_cr;
static bool trans_mov_r_cr(DisasContext *ctx, arg_mov_r_cr *a);
typedef arg_decode4 arg_hexit;
static bool trans_hexit(DisasContext *ctx, arg_hexit *a);
typedef arg_decode4 arg_sexit;
static bool trans_sexit(DisasContext *ctx, arg_sexit *a);
typedef arg_decode11 arg_lea;
static bool trans_lea(DisasContext *ctx, arg_lea *a);
typedef arg_decode12 arg_movz_0;
static bool trans_movz_0(DisasContext *ctx, arg_movz_0 *a);
typedef arg_decode12 arg_movz_16;
static bool trans_movz_16(DisasContext *ctx, arg_movz_16 *a);
typedef arg_decode12 arg_movz_32;
static bool trans_movz_32(DisasContext *ctx, arg_movz_32 *a);
typedef arg_decode12 arg_movz_48;
static bool trans_movz_48(DisasContext *ctx, arg_movz_48 *a);
typedef arg_decode12 arg_movk_0;
static bool trans_movk_0(DisasContext *ctx, arg_movk_0 *a);
typedef arg_decode12 arg_movk_16;
static bool trans_movk_16(DisasContext *ctx, arg_movk_16 *a);
typedef arg_decode12 arg_movk_32;
static bool trans_movk_32(DisasContext *ctx, arg_movk_32 *a);
typedef arg_decode12 arg_movk_48;
static bool trans_movk_48(DisasContext *ctx, arg_movk_48 *a);
typedef arg_decode13 arg_ldr_reg;
static bool trans_ldr_reg(DisasContext *ctx, arg_ldr_reg *a);
typedef arg_decode13 arg_ldr_reg_update;
static bool trans_ldr_reg_update(DisasContext *ctx, arg_ldr_reg_update *a);
typedef arg_decode14 arg_ldr_imm;
static bool trans_ldr_imm(DisasContext *ctx, arg_ldr_imm *a);
typedef arg_decode14 arg_ldr_imm_update;
static bool trans_ldr_imm_update(DisasContext *ctx, arg_ldr_imm_update *a);
typedef arg_decode13 arg_str_reg;
static bool trans_str_reg(DisasContext *ctx, arg_str_reg *a);
typedef arg_decode13 arg_str_reg_update;
static bool trans_str_reg_update(DisasContext *ctx, arg_str_reg_update *a);
typedef arg_decode14 arg_str_imm;
static bool trans_str_imm(DisasContext *ctx, arg_str_imm *a);
typedef arg_decode14 arg_str_imm_update;
static bool trans_str_imm_update(DisasContext *ctx, arg_str_imm_update *a);
typedef arg_decode11 arg_ldr_pc_rel;
static bool trans_ldr_pc_rel(DisasContext *ctx, arg_ldr_pc_rel *a);
typedef arg_decode11 arg_str_pc_rel;
static bool trans_str_pc_rel(DisasContext *ctx, arg_str_pc_rel *a);
typedef arg_decode15 arg_ubxt;
static bool trans_ubxt(DisasContext *ctx, arg_ubxt *a);
typedef arg_decode15 arg_sbxt;
static bool trans_sbxt(DisasContext *ctx, arg_sbxt *a);
typedef arg_decode15 arg_ubdp;
static bool trans_ubdp(DisasContext *ctx, arg_ubdp *a);
typedef arg_decode15 arg_sbdp;
static bool trans_sbdp(DisasContext *ctx, arg_sbdp *a);
typedef arg_decode16 arg_vadd;
static bool trans_vadd(DisasContext *ctx, arg_vadd *a);
typedef arg_decode16 arg_vsub;
static bool trans_vsub(DisasContext *ctx, arg_vsub *a);
typedef arg_decode16 arg_vmul;
static bool trans_vmul(DisasContext *ctx, arg_vmul *a);
typedef arg_decode16 arg_vdiv;
static bool trans_vdiv(DisasContext *ctx, arg_vdiv *a);
typedef arg_decode16 arg_vaddsub;
static bool trans_vaddsub(DisasContext *ctx, arg_vaddsub *a);
typedef arg_decode16 arg_vmadd;
static bool trans_vmadd(DisasContext *ctx, arg_vmadd *a);
typedef arg_decode17 arg_vmov_reg;
static bool trans_vmov_reg(DisasContext *ctx, arg_vmov_reg *a);
typedef arg_decode17 arg_vmov_reg2;
static bool trans_vmov_reg2(DisasContext *ctx, arg_vmov_reg2 *a);
typedef arg_decode18 arg_vmov;
static bool trans_vmov(DisasContext *ctx, arg_vmov *a);
typedef arg_decode19 arg_vconv;
static bool trans_vconv(DisasContext *ctx, arg_vconv *a);
typedef arg_decode20 arg_vlen;
static bool trans_vlen(DisasContext *ctx, arg_vlen *a);
typedef arg_decode21 arg_vldr_imm;
static bool trans_vldr_imm(DisasContext *ctx, arg_vldr_imm *a);
typedef arg_decode21 arg_vldr_imm_update;
static bool trans_vldr_imm_update(DisasContext *ctx, arg_vldr_imm_update *a);
typedef arg_decode21 arg_vstr_imm;
static bool trans_vstr_imm(DisasContext *ctx, arg_vstr_imm *a);
typedef arg_decode21 arg_vstr_imm_update;
static bool trans_vstr_imm_update(DisasContext *ctx, arg_vstr_imm_update *a);
typedef arg_decode22 arg_vldr_reg;
static bool trans_vldr_reg(DisasContext *ctx, arg_vldr_reg *a);
typedef arg_decode22 arg_vldr_reg_update;
static bool trans_vldr_reg_update(DisasContext *ctx, arg_vldr_reg_update *a);
typedef arg_decode22 arg_vstr_reg;
static bool trans_vstr_reg(DisasContext *ctx, arg_vstr_reg *a);
typedef arg_decode22 arg_vstr_reg_update;
static bool trans_vstr_reg_update(DisasContext *ctx, arg_vstr_reg_update *a);
typedef arg_decode16 arg_vand;
static bool trans_vand(DisasContext *ctx, arg_vand *a);
typedef arg_decode16 arg_vor;
static bool trans_vor(DisasContext *ctx, arg_vor *a);
typedef arg_decode16 arg_vxor;
static bool trans_vxor(DisasContext *ctx, arg_vxor *a);
typedef arg_decode23 arg_vcmp;
static bool trans_vcmp(DisasContext *ctx, arg_vcmp *a);
typedef arg_decode23 arg_vtst;
static bool trans_vtst(DisasContext *ctx, arg_vtst *a);
typedef arg_decode24 arg_vminmax;
static bool trans_vminmax(DisasContext *ctx, arg_vminmax *a);
typedef arg_decode18 arg_vabs;
static bool trans_vabs(DisasContext *ctx, arg_vabs *a);
typedef arg_decode16 arg_vshl;
static bool trans_vshl(DisasContext *ctx, arg_vshl *a);
typedef arg_decode25 arg_vshr;
static bool trans_vshr(DisasContext *ctx, arg_vshr *a);
typedef arg_decode18 arg_vsqrt;
static bool trans_vsqrt(DisasContext *ctx, arg_vsqrt *a);
typedef arg_decode16 arg_vmod;
static bool trans_vmod(DisasContext *ctx, arg_vmod *a);
typedef arg_decode26 arg_vmovall;
static bool trans_vmovall(DisasContext *ctx, arg_vmovall *a);

static void decode_extract_decode_Fmt_0(DisasContext *ctx, arg_decode0 *a, uint32_t insn)
{
    a->rel = sextract32(insn, 0, 25);
}

static void decode_extract_decode_Fmt_1(DisasContext *ctx, arg_decode1 *a, uint32_t insn)
{
    a->r1 = extract32(insn, 20, 5);
}

static void decode_extract_decode_Fmt_10(DisasContext *ctx, arg_decode1 *a, uint32_t insn)
{
    a->r1 = extract32(insn, 0, 5);
}

static void decode_extract_decode_Fmt_11(DisasContext *ctx, arg_decode10 *a, uint32_t insn)
{
    a->cr1 = extract32(insn, 5, 5);
    a->r1 = extract32(insn, 0, 5);
}

static void decode_extract_decode_Fmt_12(DisasContext *ctx, arg_decode11 *a, uint32_t insn)
{
    a->rel = sextract32(insn, 0, 20);
    a->r1 = extract32(insn, 20, 5);
}

static void decode_extract_decode_Fmt_13(DisasContext *ctx, arg_decode12 *a, uint32_t insn)
{
    a->imm = extract32(insn, 0, 16);
    a->r1 = extract32(insn, 20, 5);
}

static void decode_extract_decode_Fmt_14(DisasContext *ctx, arg_decode13 *a, uint32_t insn)
{
    a->r2 = extract32(insn, 12, 5);
    a->shift = extract32(insn, 5, 3);
    a->r1 = extract32(insn, 20, 5);
    a->r3 = extract32(insn, 0, 5);
}

static void decode_extract_decode_Fmt_15(DisasContext *ctx, arg_decode14 *a, uint32_t insn)
{
    a->r2 = extract32(insn, 12, 5);
    a->imm = sextract32(insn, 0, 12);
    a->r1 = extract32(insn, 20, 5);
}

static void decode_extract_decode_Fmt_16(DisasContext *ctx, arg_decode11 *a, uint32_t insn)
{
    a->rel = sextract32(insn, 0, 19);
    a->r1 = extract32(insn, 20, 5);
}

static void decode_extract_decode_Fmt_17(DisasContext *ctx, arg_decode15 *a, uint32_t insn)
{
    a->start = extract32(insn, 0, 6);
    a->count = deposit32(extract32(insn, 6, 1), 1, 31, extract32(insn, 22, 5));
    a->r2 = extract32(insn, 12, 5);
    a->r1 = extract32(insn, 17, 5);
}

static void decode_extract_decode_Fmt_18(DisasContext *ctx, arg_decode16 *a, uint32_t insn)
{
    a->v2 = extract32(insn, 12, 4);
    a->v1 = extract32(insn, 16, 4);
    a->v3 = extract32(insn, 0, 4);
    a->type = extract32(insn, 20, 3);
}

static void decode_extract_decode_Fmt_19(DisasContext *ctx, arg_decode17 *a, uint32_t insn)
{
    a->slot = deposit32(extract32(insn, 5, 3), 3, 29, extract32(insn, 16, 3));
    a->v1 = extract32(insn, 12, 4);
    a->r2 = extract32(insn, 0, 5);
    a->type = extract32(insn, 20, 3);
}

static void decode_extract_decode_Fmt_2(DisasContext *ctx, arg_decode2 *a, uint32_t insn)
{
    a->r2 = extract32(insn, 12, 5);
    a->r1 = extract32(insn, 17, 5);
    a->r3 = extract32(insn, 0, 5);
}

static void decode_extract_decode_Fmt_20(DisasContext *ctx, arg_decode18 *a, uint32_t insn)
{
    a->v2 = extract32(insn, 12, 4);
    a->v1 = extract32(insn, 16, 4);
    a->type = extract32(insn, 20, 3);
}

static void decode_extract_decode_Fmt_21(DisasContext *ctx, arg_decode19 *a, uint32_t insn)
{
    a->v2 = extract32(insn, 12, 4);
    a->v1 = extract32(insn, 16, 4);
    a->target = extract32(insn, 0, 3);
    a->type = extract32(insn, 20, 3);
}

static void decode_extract_decode_Fmt_22(DisasContext *ctx, arg_decode20 *a, uint32_t insn)
{
    a->v1 = extract32(insn, 12, 4);
    a->r1 = extract32(insn, 0, 5);
    a->type = extract32(insn, 20, 3);
}

static void decode_extract_decode_Fmt_23(DisasContext *ctx, arg_decode21 *a, uint32_t insn)
{
    a->v1 = extract32(insn, 12, 4);
    a->imm = sextract32(insn, 0, 8);
    a->r1 = extract32(insn, 16, 5);
}

static void decode_extract_decode_Fmt_24(DisasContext *ctx, arg_decode22 *a, uint32_t insn)
{
    a->v1 = extract32(insn, 12, 4);
    a->r2 = extract32(insn, 0, 5);
    a->r1 = extract32(insn, 16, 5);
}

static void decode_extract_decode_Fmt_25(DisasContext *ctx, arg_decode23 *a, uint32_t insn)
{
    a->v1 = extract32(insn, 16, 4);
    a->v3 = extract32(insn, 0, 4);
    a->type = extract32(insn, 20, 3);
    a->v2 = extract32(insn, 12, 4);
    a->cond = extract32(insn, 4, 3);
}

static void decode_extract_decode_Fmt_26(DisasContext *ctx, arg_decode24 *a, uint32_t insn)
{
    a->v2 = extract32(insn, 12, 4);
    a->v1 = extract32(insn, 16, 4);
    a->check_sign = extract32(insn, 0, 1);
    a->type = extract32(insn, 20, 3);
}

static void decode_extract_decode_Fmt_27(DisasContext *ctx, arg_decode25 *a, uint32_t insn)
{
    a->v1 = extract32(insn, 16, 4);
    a->is_signed = extract32(insn, 4, 1);
    a->v3 = extract32(insn, 0, 4);
    a->type = extract32(insn, 20, 3);
    a->v2 = extract32(insn, 12, 4);
}

static void decode_extract_decode_Fmt_28(DisasContext *ctx, arg_decode26 *a, uint32_t insn)
{
    a->v1 = extract32(insn, 12, 4);
    a->r2 = extract32(insn, 0, 5);
    a->type = extract32(insn, 20, 3);
}

static void decode_extract_decode_Fmt_3(DisasContext *ctx, arg_decode3 *a, uint32_t insn)
{
    a->imm8 = extract32(insn, 0, 8);
    a->r2 = extract32(insn, 12, 5);
    a->r1 = extract32(insn, 17, 5);
}

static void decode_extract_decode_Fmt_4(DisasContext *ctx, arg_decode4 *a, uint32_t insn)
{
}

static void decode_extract_decode_Fmt_5(DisasContext *ctx, arg_decode5 *a, uint32_t insn)
{
    a->r2 = extract32(insn, 12, 5);
    a->r1 = extract32(insn, 17, 5);
}

static void decode_extract_decode_Fmt_6(DisasContext *ctx, arg_decode6 *a, uint32_t insn)
{
    a->to = extract32(insn, 2, 2);
    a->r2 = extract32(insn, 12, 5);
    a->r1 = extract32(insn, 17, 5);
    a->from = extract32(insn, 0, 2);
}

static void decode_extract_decode_Fmt_7(DisasContext *ctx, arg_decode7 *a, uint32_t insn)
{
    a->r3 = extract32(insn, 0, 5);
    a->r2 = extract32(insn, 12, 5);
    a->r1 = extract32(insn, 17, 5);
    a->cond = extract32(insn, 5, 3);
}

static void decode_extract_decode_Fmt_8(DisasContext *ctx, arg_decode8 *a, uint32_t insn)
{
    a->reg_override = extract32(insn, 2, 4);
    a->sz = extract32(insn, 0, 2);
    a->rel_override = extract32(insn, 6, 5);
}

static void decode_extract_decode_Fmt_9(DisasContext *ctx, arg_decode9 *a, uint32_t insn)
{
    a->r2 = extract32(insn, 12, 5);
    a->r3 = extract32(insn, 0, 5);
}

static bool decode(DisasContext *ctx, uint32_t insn)
{
    union {
        arg_decode0 f_decode0;
        arg_decode1 f_decode1;
        arg_decode10 f_decode10;
        arg_decode11 f_decode11;
        arg_decode12 f_decode12;
        arg_decode13 f_decode13;
        arg_decode14 f_decode14;
        arg_decode15 f_decode15;
        arg_decode16 f_decode16;
        arg_decode17 f_decode17;
        arg_decode18 f_decode18;
        arg_decode19 f_decode19;
        arg_decode2 f_decode2;
        arg_decode20 f_decode20;
        arg_decode21 f_decode21;
        arg_decode22 f_decode22;
        arg_decode23 f_decode23;
        arg_decode24 f_decode24;
        arg_decode25 f_decode25;
        arg_decode26 f_decode26;
        arg_decode3 f_decode3;
        arg_decode4 f_decode4;
        arg_decode5 f_decode5;
        arg_decode6 f_decode6;
        arg_decode7 f_decode7;
        arg_decode8 f_decode8;
        arg_decode9 f_decode9;
    } u;

    switch ((insn >> 27) & 0x3) {
    case 0x0:
        /* ...00... ........ ........ ........ */
        switch ((insn >> 25) & 0x3) {
        case 0x0:
            /* ...0000. ........ ........ ........ */
            /* hive64.decode:3 */
            decode_extract_decode_Fmt_0(ctx, &u.f_decode0, insn);
            if (trans_branch(ctx, &u.f_decode0)) return true;
            break;
        case 0x1:
            /* ...0001. ........ ........ ........ */
            /* hive64.decode:4 */
            decode_extract_decode_Fmt_0(ctx, &u.f_decode0, insn);
            if (trans_branch_link(ctx, &u.f_decode0)) return true;
            break;
        case 0x2:
            /* ...0010. ........ ........ ........ */
            /* hive64.decode:5 */
            decode_extract_decode_Fmt_1(ctx, &u.f_decode1, insn);
            if (trans_branch_reg(ctx, &u.f_decode1)) return true;
            break;
        case 0x3:
            /* ...0011. ........ ........ ........ */
            /* hive64.decode:6 */
            decode_extract_decode_Fmt_1(ctx, &u.f_decode1, insn);
            if (trans_branch_reg_link(ctx, &u.f_decode1)) return true;
            break;
        }
        break;
    case 0x1:
        /* ...01... ........ ........ ........ */
        switch ((insn >> 10) & 0x3) {
        case 0x0:
            /* ...01... ........ ....00.. ........ */
            switch ((insn >> 23) & 0xf) {
            case 0x0:
                /* ...01000 0....... ....00.. ........ */
                switch ((insn >> 8) & 0x3) {
                case 0x0:
                    /* ...01000 0....... ....0000 ........ */
                    /* hive64.decode:8 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_add_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x1:
                    /* ...01000 0....... ....0001 ........ */
                    /* hive64.decode:26 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_add_imm(ctx, &u.f_decode3)) return true;
                    break;
                }
                break;
            case 0x1:
                /* ...01000 1....... ....00.. ........ */
                switch (insn & 0x00400300) {
                case 0x00000000:
                    /* ...01000 10...... ....0000 ........ */
                    /* hive64.decode:9 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_sub_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x00000100:
                    /* ...01000 10...... ....0001 ........ */
                    /* hive64.decode:27 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_sub_imm(ctx, &u.f_decode3)) return true;
                    break;
                case 0x00400000:
                    /* ...01000 11...... ....0000 ........ */
                    /* hive64.decode:10 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_cmp_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x00400100:
                    /* ...01000 11...... ....0001 ........ */
                    /* hive64.decode:28 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_cmp_imm(ctx, &u.f_decode3)) return true;
                    break;
                }
                break;
            case 0x2:
                /* ...01001 0....... ....00.. ........ */
                switch ((insn >> 8) & 0x3) {
                case 0x0:
                    /* ...01001 0....... ....0000 ........ */
                    /* hive64.decode:11 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_mul_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x1:
                    /* ...01001 0....... ....0001 ........ */
                    /* hive64.decode:29 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_mul_imm(ctx, &u.f_decode3)) return true;
                    break;
                }
                break;
            case 0x3:
                /* ...01001 1....... ....00.. ........ */
                switch ((insn >> 8) & 0x3) {
                case 0x0:
                    /* ...01001 1....... ....0000 ........ */
                    /* hive64.decode:12 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_div_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x1:
                    /* ...01001 1....... ....0001 ........ */
                    /* hive64.decode:30 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_div_imm(ctx, &u.f_decode3)) return true;
                    break;
                case 0x2:
                    /* ...01001 1....... ....0010 ........ */
                    /* hive64.decode:14 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_divs_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x3:
                    /* ...01001 1....... ....0011 ........ */
                    /* hive64.decode:32 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_divs_imm(ctx, &u.f_decode3)) return true;
                    break;
                }
                break;
            case 0x4:
                /* ...01010 0....... ....00.. ........ */
                switch ((insn >> 8) & 0x3) {
                case 0x0:
                    /* ...01010 0....... ....0000 ........ */
                    /* hive64.decode:13 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_mod_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x1:
                    /* ...01010 0....... ....0001 ........ */
                    /* hive64.decode:31 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_mod_imm(ctx, &u.f_decode3)) return true;
                    break;
                case 0x2:
                    /* ...01010 0....... ....0010 ........ */
                    /* hive64.decode:15 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_mods_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x3:
                    /* ...01010 0....... ....0011 ........ */
                    /* hive64.decode:33 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_mods_imm(ctx, &u.f_decode3)) return true;
                    break;
                }
                break;
            case 0x5:
                /* ...01010 1....... ....00.. ........ */
                switch (insn & 0x00400300) {
                case 0x00000000:
                    /* ...01010 10...... ....0000 ........ */
                    /* hive64.decode:16 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_and_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x00000100:
                    /* ...01010 10...... ....0001 ........ */
                    /* hive64.decode:34 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_and_imm(ctx, &u.f_decode3)) return true;
                    break;
                case 0x00400000:
                    /* ...01010 11...... ....0000 ........ */
                    /* hive64.decode:17 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_tst_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x00400100:
                    /* ...01010 11...... ....0001 ........ */
                    /* hive64.decode:35 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_tst_imm(ctx, &u.f_decode3)) return true;
                    break;
                }
                break;
            case 0x6:
                /* ...01011 0....... ....00.. ........ */
                switch ((insn >> 8) & 0x3) {
                case 0x0:
                    /* ...01011 0....... ....0000 ........ */
                    /* hive64.decode:18 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_or_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x1:
                    /* ...01011 0....... ....0001 ........ */
                    /* hive64.decode:36 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_or_imm(ctx, &u.f_decode3)) return true;
                    break;
                }
                break;
            case 0x7:
                /* ...01011 1....... ....00.. ........ */
                switch ((insn >> 8) & 0x3) {
                case 0x0:
                    /* ...01011 1....... ....0000 ........ */
                    /* hive64.decode:19 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_xor_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x1:
                    /* ...01011 1....... ....0001 ........ */
                    /* hive64.decode:37 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_xor_imm(ctx, &u.f_decode3)) return true;
                    break;
                }
                break;
            case 0x8:
                /* ...01100 0....... ....00.. ........ */
                switch ((insn >> 8) & 0x3) {
                case 0x0:
                    /* ...01100 0....... ....0000 ........ */
                    /* hive64.decode:20 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_shl_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x1:
                    /* ...01100 0....... ....0001 ........ */
                    if ((insn & 0x000000ff) == 0x00000000) {
                        /* ...01100 0....... ....0001 00000000 */
                        if ((insn & 0x003ff000) == 0x003fd000) {
                            /* ...01100 0.111111 11010001 00000000 */
                            /* hive64.decode:40 */
                            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
                            if (trans_ret(ctx, &u.f_decode4)) return true;
                        }
                        /* hive64.decode:41 */
                        decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                        if (trans_mov(ctx, &u.f_decode5)) return true;
                    }
                    /* hive64.decode:43 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_shl_imm(ctx, &u.f_decode3)) return true;
                    break;
                }
                break;
            case 0x9:
                /* ...01100 1....... ....00.. ........ */
                switch ((insn >> 8) & 0x3) {
                case 0x0:
                    /* ...01100 1....... ....0000 ........ */
                    /* hive64.decode:21 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_shr_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x1:
                    /* ...01100 1....... ....0001 ........ */
                    /* hive64.decode:45 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_shr_imm(ctx, &u.f_decode3)) return true;
                    break;
                case 0x2:
                    /* ...01100 1....... ....0010 ........ */
                    /* hive64.decode:22 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_sar_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x3:
                    /* ...01100 1....... ....0011 ........ */
                    /* hive64.decode:46 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_sar_imm(ctx, &u.f_decode3)) return true;
                    break;
                }
                break;
            case 0xa:
                /* ...01101 0....... ....00.. ........ */
                switch ((insn >> 8) & 0x3) {
                case 0x0:
                    /* ...01101 0....... ....0000 ........ */
                    /* hive64.decode:23 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_rol_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x1:
                    /* ...01101 0....... ....0001 ........ */
                    /* hive64.decode:47 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_rol_imm(ctx, &u.f_decode3)) return true;
                    break;
                }
                break;
            case 0xb:
                /* ...01101 1....... ....00.. ........ */
                switch ((insn >> 8) & 0x3) {
                case 0x0:
                    /* ...01101 1....... ....0000 ........ */
                    /* hive64.decode:24 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_ror_reg(ctx, &u.f_decode2)) return true;
                    break;
                case 0x1:
                    /* ...01101 1....... ....0001 ........ */
                    /* hive64.decode:48 */
                    decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
                    if (trans_ror_imm(ctx, &u.f_decode3)) return true;
                    break;
                }
                break;
            case 0xc:
                /* ...01110 0....... ....00.. ........ */
                decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                switch ((insn >> 9) & 0x1) {
                case 0x0:
                    /* ...01110 0....... ....000. ........ */
                    /* hive64.decode:50 */
                    if (trans_neg(ctx, &u.f_decode5)) return true;
                    break;
                }
                break;
            case 0xd:
                /* ...01110 1....... ....00.. ........ */
                decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                switch ((insn >> 9) & 0x1) {
                case 0x0:
                    /* ...01110 1....... ....000. ........ */
                    /* hive64.decode:51 */
                    if (trans_not(ctx, &u.f_decode5)) return true;
                    break;
                }
                break;
            case 0xe:
                /* ...01111 0....... ....00.. ........ */
                /* hive64.decode:52 */
                decode_extract_decode_Fmt_6(ctx, &u.f_decode6, insn);
                if (trans_extend(ctx, &u.f_decode6)) return true;
                break;
            case 0xf:
                /* ...01111 1....... ....00.. ........ */
                decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                switch ((insn >> 9) & 0x1) {
                case 0x0:
                    /* ...01111 1....... ....000. ........ */
                    /* hive64.decode:53 */
                    if (trans_swe(ctx, &u.f_decode5)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x1:
            /* ...01... ........ ....01.. ........ */
            switch ((insn >> 8) & 0x3) {
            case 0x0:
                /* ...01... ........ ....0100 ........ */
                decode_extract_decode_Fmt_17(ctx, &u.f_decode15, insn);
                switch ((insn >> 7) & 0x1) {
                case 0x0:
                    /* ...01... ........ ....0100 0....... */
                    /* hive64.decode:132 */
                    if (trans_ubxt(ctx, &u.f_decode15)) return true;
                    break;
                case 0x1:
                    /* ...01... ........ ....0100 1....... */
                    /* hive64.decode:133 */
                    if (trans_sbxt(ctx, &u.f_decode15)) return true;
                    break;
                }
                break;
            case 0x1:
                /* ...01... ........ ....0101 ........ */
                decode_extract_decode_Fmt_17(ctx, &u.f_decode15, insn);
                switch ((insn >> 7) & 0x1) {
                case 0x0:
                    /* ...01... ........ ....0101 0....... */
                    /* hive64.decode:134 */
                    if (trans_ubdp(ctx, &u.f_decode15)) return true;
                    break;
                case 0x1:
                    /* ...01... ........ ....0101 1....... */
                    /* hive64.decode:135 */
                    if (trans_sbdp(ctx, &u.f_decode15)) return true;
                    break;
                }
                break;
            case 0x2:
                /* ...01... ........ ....0110 ........ */
                switch (insn & 0x078000c0) {
                case 0x00000000:
                    /* ...01000 0....... ....0110 00...... */
                    /* hive64.decode:60 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_fadd(ctx, &u.f_decode2)) return true;
                    break;
                case 0x00000040:
                    /* ...01000 0....... ....0110 01...... */
                    /* hive64.decode:78 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_sadd(ctx, &u.f_decode2)) return true;
                    break;
                case 0x00000080:
                    /* ...01000 0....... ....0110 10...... */
                    /* hive64.decode:61 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_faddi(ctx, &u.f_decode2)) return true;
                    break;
                case 0x000000c0:
                    /* ...01000 0....... ....0110 11...... */
                    /* hive64.decode:79 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_saddi(ctx, &u.f_decode2)) return true;
                    break;
                case 0x00800000:
                    /* ...01000 1....... ....0110 00...... */
                    switch ((insn >> 22) & 0x1) {
                    case 0x0:
                        /* ...01000 10...... ....0110 00...... */
                        /* hive64.decode:62 */
                        decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                        if (trans_fsub(ctx, &u.f_decode2)) return true;
                        break;
                    case 0x1:
                        /* ...01000 11...... ....0110 00...... */
                        /* hive64.decode:64 */
                        decode_extract_decode_Fmt_9(ctx, &u.f_decode9, insn);
                        if (trans_fcmp(ctx, &u.f_decode9)) return true;
                        break;
                    }
                    break;
                case 0x00800040:
                    /* ...01000 1....... ....0110 01...... */
                    switch ((insn >> 22) & 0x1) {
                    case 0x0:
                        /* ...01000 10...... ....0110 01...... */
                        /* hive64.decode:80 */
                        decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                        if (trans_ssub(ctx, &u.f_decode2)) return true;
                        break;
                    case 0x1:
                        /* ...01000 11...... ....0110 01...... */
                        /* hive64.decode:82 */
                        decode_extract_decode_Fmt_9(ctx, &u.f_decode9, insn);
                        if (trans_scmp(ctx, &u.f_decode9)) return true;
                        break;
                    }
                    break;
                case 0x00800080:
                    /* ...01000 1....... ....0110 10...... */
                    switch ((insn >> 22) & 0x1) {
                    case 0x0:
                        /* ...01000 10...... ....0110 10...... */
                        /* hive64.decode:63 */
                        decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                        if (trans_fsubi(ctx, &u.f_decode2)) return true;
                        break;
                    case 0x1:
                        /* ...01000 11...... ....0110 10...... */
                        /* hive64.decode:65 */
                        decode_extract_decode_Fmt_9(ctx, &u.f_decode9, insn);
                        if (trans_fcmpi(ctx, &u.f_decode9)) return true;
                        break;
                    }
                    break;
                case 0x008000c0:
                    /* ...01000 1....... ....0110 11...... */
                    switch ((insn >> 22) & 0x1) {
                    case 0x0:
                        /* ...01000 10...... ....0110 11...... */
                        /* hive64.decode:81 */
                        decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                        if (trans_ssubi(ctx, &u.f_decode2)) return true;
                        break;
                    case 0x1:
                        /* ...01000 11...... ....0110 11...... */
                        /* hive64.decode:83 */
                        decode_extract_decode_Fmt_9(ctx, &u.f_decode9, insn);
                        if (trans_scmpi(ctx, &u.f_decode9)) return true;
                        break;
                    }
                    break;
                case 0x01000000:
                    /* ...01001 0....... ....0110 00...... */
                    /* hive64.decode:66 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_fmul(ctx, &u.f_decode2)) return true;
                    break;
                case 0x01000040:
                    /* ...01001 0....... ....0110 01...... */
                    /* hive64.decode:84 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_smul(ctx, &u.f_decode2)) return true;
                    break;
                case 0x01000080:
                    /* ...01001 0....... ....0110 10...... */
                    /* hive64.decode:67 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_fmuli(ctx, &u.f_decode2)) return true;
                    break;
                case 0x010000c0:
                    /* ...01001 0....... ....0110 11...... */
                    /* hive64.decode:85 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_smuli(ctx, &u.f_decode2)) return true;
                    break;
                case 0x01800000:
                    /* ...01001 1....... ....0110 00...... */
                    /* hive64.decode:68 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_fdiv(ctx, &u.f_decode2)) return true;
                    break;
                case 0x01800040:
                    /* ...01001 1....... ....0110 01...... */
                    /* hive64.decode:86 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_sdiv(ctx, &u.f_decode2)) return true;
                    break;
                case 0x01800080:
                    /* ...01001 1....... ....0110 10...... */
                    /* hive64.decode:69 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_fdivi(ctx, &u.f_decode2)) return true;
                    break;
                case 0x018000c0:
                    /* ...01001 1....... ....0110 11...... */
                    /* hive64.decode:87 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_sdivi(ctx, &u.f_decode2)) return true;
                    break;
                case 0x02000000:
                    /* ...01010 0....... ....0110 00...... */
                    /* hive64.decode:70 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_fmod(ctx, &u.f_decode2)) return true;
                    break;
                case 0x02000040:
                    /* ...01010 0....... ....0110 01...... */
                    /* hive64.decode:88 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_smod(ctx, &u.f_decode2)) return true;
                    break;
                case 0x02000080:
                    /* ...01010 0....... ....0110 10...... */
                    /* hive64.decode:71 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_fmodi(ctx, &u.f_decode2)) return true;
                    break;
                case 0x020000c0:
                    /* ...01010 0....... ....0110 11...... */
                    /* hive64.decode:89 */
                    decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
                    if (trans_smodi(ctx, &u.f_decode2)) return true;
                    break;
                case 0x02800000:
                    /* ...01010 1....... ....0110 00...... */
                    /* hive64.decode:72 */
                    decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                    if (trans_f2i(ctx, &u.f_decode5)) return true;
                    break;
                case 0x02800040:
                    /* ...01010 1....... ....0110 01...... */
                    /* hive64.decode:90 */
                    decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                    if (trans_s2i(ctx, &u.f_decode5)) return true;
                    break;
                case 0x02800080:
                    /* ...01010 1....... ....0110 10...... */
                    /* hive64.decode:73 */
                    decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                    if (trans_i2f(ctx, &u.f_decode5)) return true;
                    break;
                case 0x028000c0:
                    /* ...01010 1....... ....0110 11...... */
                    /* hive64.decode:91 */
                    decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                    if (trans_i2s(ctx, &u.f_decode5)) return true;
                    break;
                case 0x03000000:
                    /* ...01011 0....... ....0110 00...... */
                    /* hive64.decode:74 */
                    decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                    if (trans_fsin(ctx, &u.f_decode5)) return true;
                    break;
                case 0x03000040:
                    /* ...01011 0....... ....0110 01...... */
                    /* hive64.decode:92 */
                    decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                    if (trans_ssin(ctx, &u.f_decode5)) return true;
                    break;
                case 0x03000080:
                    /* ...01011 0....... ....0110 10...... */
                    /* hive64.decode:75 */
                    decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                    if (trans_fsini(ctx, &u.f_decode5)) return true;
                    break;
                case 0x030000c0:
                    /* ...01011 0....... ....0110 11...... */
                    /* hive64.decode:93 */
                    decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                    if (trans_ssini(ctx, &u.f_decode5)) return true;
                    break;
                case 0x03800000:
                    /* ...01011 1....... ....0110 00...... */
                    /* hive64.decode:76 */
                    decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                    if (trans_fsqrt(ctx, &u.f_decode5)) return true;
                    break;
                case 0x03800040:
                    /* ...01011 1....... ....0110 01...... */
                    /* hive64.decode:94 */
                    decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                    if (trans_ssqrt(ctx, &u.f_decode5)) return true;
                    break;
                case 0x03800080:
                    /* ...01011 1....... ....0110 10...... */
                    /* hive64.decode:77 */
                    decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                    if (trans_fsqrti(ctx, &u.f_decode5)) return true;
                    break;
                case 0x038000c0:
                    /* ...01011 1....... ....0110 11...... */
                    /* hive64.decode:95 */
                    decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                    if (trans_ssqrti(ctx, &u.f_decode5)) return true;
                    break;
                case 0x04000000:
                    /* ...01100 0....... ....0110 00...... */
                    /* hive64.decode:96 */
                    decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                    if (trans_s2f(ctx, &u.f_decode5)) return true;
                    break;
                case 0x04000040:
                    /* ...01100 0....... ....0110 01...... */
                    /* hive64.decode:97 */
                    decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
                    if (trans_f2s(ctx, &u.f_decode5)) return true;
                    break;
                }
                break;
            case 0x3:
                /* ...01... ........ ....0111 ........ */
                /* hive64.decode:55 */
                decode_extract_decode_Fmt_7(ctx, &u.f_decode7, insn);
                if (trans_cswap(ctx, &u.f_decode7)) return true;
                break;
            }
            break;
        case 0x2:
            /* ...01... ........ ....10.. ........ */
            decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
            switch ((insn >> 8) & 0x3) {
            case 0x0:
                /* ...01... ........ ....1000 ........ */
                /* hive64.decode:56 */
                if (trans_xchg(ctx, &u.f_decode5)) return true;
                break;
            }
            break;
        case 0x3:
            /* ...01... ........ ....11.. ........ */
            switch (insn & 0x07800300) {
            case 0x00000000:
                /* ...01000 0....... ....1100 ........ */
                /* hive64.decode:138 */
                decode_extract_decode_Fmt_18(ctx, &u.f_decode16, insn);
                if (trans_vadd(ctx, &u.f_decode16)) return true;
                break;
            case 0x00000100:
                /* ...01000 0....... ....1101 ........ */
                /* hive64.decode:165 */
                decode_extract_decode_Fmt_26(ctx, &u.f_decode24, insn);
                if (trans_vminmax(ctx, &u.f_decode24)) return true;
                break;
            case 0x00800000:
                /* ...01000 1....... ....1100 ........ */
                /* hive64.decode:139 */
                decode_extract_decode_Fmt_18(ctx, &u.f_decode16, insn);
                if (trans_vsub(ctx, &u.f_decode16)) return true;
                break;
            case 0x00800100:
                /* ...01000 1....... ....1101 ........ */
                /* hive64.decode:166 */
                decode_extract_decode_Fmt_20(ctx, &u.f_decode18, insn);
                if (trans_vabs(ctx, &u.f_decode18)) return true;
                break;
            case 0x01000000:
                /* ...01001 0....... ....1100 ........ */
                /* hive64.decode:140 */
                decode_extract_decode_Fmt_18(ctx, &u.f_decode16, insn);
                if (trans_vmul(ctx, &u.f_decode16)) return true;
                break;
            case 0x01000100:
                /* ...01001 0....... ....1101 ........ */
                /* hive64.decode:167 */
                decode_extract_decode_Fmt_18(ctx, &u.f_decode16, insn);
                if (trans_vshl(ctx, &u.f_decode16)) return true;
                break;
            case 0x01800000:
                /* ...01001 1....... ....1100 ........ */
                /* hive64.decode:141 */
                decode_extract_decode_Fmt_18(ctx, &u.f_decode16, insn);
                if (trans_vdiv(ctx, &u.f_decode16)) return true;
                break;
            case 0x01800100:
                /* ...01001 1....... ....1101 ........ */
                /* hive64.decode:168 */
                decode_extract_decode_Fmt_27(ctx, &u.f_decode25, insn);
                if (trans_vshr(ctx, &u.f_decode25)) return true;
                break;
            case 0x02000000:
                /* ...01010 0....... ....1100 ........ */
                /* hive64.decode:142 */
                decode_extract_decode_Fmt_18(ctx, &u.f_decode16, insn);
                if (trans_vaddsub(ctx, &u.f_decode16)) return true;
                break;
            case 0x02000100:
                /* ...01010 0....... ....1101 ........ */
                /* hive64.decode:169 */
                decode_extract_decode_Fmt_20(ctx, &u.f_decode18, insn);
                if (trans_vsqrt(ctx, &u.f_decode18)) return true;
                break;
            case 0x02800000:
                /* ...01010 1....... ....1100 ........ */
                /* hive64.decode:143 */
                decode_extract_decode_Fmt_18(ctx, &u.f_decode16, insn);
                if (trans_vmadd(ctx, &u.f_decode16)) return true;
                break;
            case 0x02800100:
                /* ...01010 1....... ....1101 ........ */
                /* hive64.decode:170 */
                decode_extract_decode_Fmt_18(ctx, &u.f_decode16, insn);
                if (trans_vmod(ctx, &u.f_decode16)) return true;
                break;
            case 0x03000000:
                /* ...01011 0....... ....1100 ........ */
                decode_extract_decode_Fmt_19(ctx, &u.f_decode17, insn);
                switch ((insn >> 19) & 0x1) {
                case 0x0:
                    /* ...01011 0...0... ....1100 ........ */
                    /* hive64.decode:144 */
                    if (trans_vmov_reg(ctx, &u.f_decode17)) return true;
                    break;
                case 0x1:
                    /* ...01011 0...1... ....1100 ........ */
                    /* hive64.decode:145 */
                    if (trans_vmov_reg2(ctx, &u.f_decode17)) return true;
                    break;
                }
                break;
            case 0x03000100:
                /* ...01011 0....... ....1101 ........ */
                /* hive64.decode:171 */
                decode_extract_decode_Fmt_28(ctx, &u.f_decode26, insn);
                if (trans_vmovall(ctx, &u.f_decode26)) return true;
                break;
            case 0x03800000:
                /* ...01011 1....... ....1100 ........ */
                /* hive64.decode:146 */
                decode_extract_decode_Fmt_20(ctx, &u.f_decode18, insn);
                if (trans_vmov(ctx, &u.f_decode18)) return true;
                break;
            case 0x04000000:
                /* ...01100 0....... ....1100 ........ */
                /* hive64.decode:147 */
                decode_extract_decode_Fmt_21(ctx, &u.f_decode19, insn);
                if (trans_vconv(ctx, &u.f_decode19)) return true;
                break;
            case 0x04800000:
                /* ...01100 1....... ....1100 ........ */
                /* hive64.decode:148 */
                decode_extract_decode_Fmt_22(ctx, &u.f_decode20, insn);
                if (trans_vlen(ctx, &u.f_decode20)) return true;
                break;
            case 0x05000000:
                /* ...01101 0....... ....1100 ........ */
                switch ((insn >> 21) & 0x3) {
                case 0x0:
                    /* ...01101 000..... ....1100 ........ */
                    /* hive64.decode:154 */
                    decode_extract_decode_Fmt_24(ctx, &u.f_decode22, insn);
                    if (trans_vldr_reg(ctx, &u.f_decode22)) return true;
                    break;
                case 0x1:
                    /* ...01101 001..... ....1100 ........ */
                    /* hive64.decode:155 */
                    decode_extract_decode_Fmt_24(ctx, &u.f_decode22, insn);
                    if (trans_vldr_reg_update(ctx, &u.f_decode22)) return true;
                    break;
                case 0x2:
                    /* ...01101 010..... ....1100 ........ */
                    /* hive64.decode:150 */
                    decode_extract_decode_Fmt_23(ctx, &u.f_decode21, insn);
                    if (trans_vldr_imm(ctx, &u.f_decode21)) return true;
                    break;
                case 0x3:
                    /* ...01101 011..... ....1100 ........ */
                    /* hive64.decode:151 */
                    decode_extract_decode_Fmt_23(ctx, &u.f_decode21, insn);
                    if (trans_vldr_imm_update(ctx, &u.f_decode21)) return true;
                    break;
                }
                break;
            case 0x05800000:
                /* ...01101 1....... ....1100 ........ */
                switch ((insn >> 21) & 0x3) {
                case 0x0:
                    /* ...01101 100..... ....1100 ........ */
                    /* hive64.decode:156 */
                    decode_extract_decode_Fmt_24(ctx, &u.f_decode22, insn);
                    if (trans_vstr_reg(ctx, &u.f_decode22)) return true;
                    break;
                case 0x1:
                    /* ...01101 101..... ....1100 ........ */
                    /* hive64.decode:157 */
                    decode_extract_decode_Fmt_24(ctx, &u.f_decode22, insn);
                    if (trans_vstr_reg_update(ctx, &u.f_decode22)) return true;
                    break;
                case 0x2:
                    /* ...01101 110..... ....1100 ........ */
                    /* hive64.decode:152 */
                    decode_extract_decode_Fmt_23(ctx, &u.f_decode21, insn);
                    if (trans_vstr_imm(ctx, &u.f_decode21)) return true;
                    break;
                case 0x3:
                    /* ...01101 111..... ....1100 ........ */
                    /* hive64.decode:153 */
                    decode_extract_decode_Fmt_23(ctx, &u.f_decode21, insn);
                    if (trans_vstr_imm_update(ctx, &u.f_decode21)) return true;
                    break;
                }
                break;
            case 0x06000000:
                /* ...01110 0....... ....1100 ........ */
                /* hive64.decode:159 */
                decode_extract_decode_Fmt_18(ctx, &u.f_decode16, insn);
                if (trans_vand(ctx, &u.f_decode16)) return true;
                break;
            case 0x06800000:
                /* ...01110 1....... ....1100 ........ */
                /* hive64.decode:160 */
                decode_extract_decode_Fmt_18(ctx, &u.f_decode16, insn);
                if (trans_vor(ctx, &u.f_decode16)) return true;
                break;
            case 0x07000000:
                /* ...01111 0....... ....1100 ........ */
                /* hive64.decode:161 */
                decode_extract_decode_Fmt_18(ctx, &u.f_decode16, insn);
                if (trans_vxor(ctx, &u.f_decode16)) return true;
                break;
            case 0x07800000:
                /* ...01111 1....... ....1100 ........ */
                /* hive64.decode:162 */
                decode_extract_decode_Fmt_25(ctx, &u.f_decode23, insn);
                if (trans_vcmp(ctx, &u.f_decode23)) return true;
                break;
            case 0x07800100:
                /* ...01111 1....... ....1101 ........ */
                /* hive64.decode:164 */
                decode_extract_decode_Fmt_25(ctx, &u.f_decode23, insn);
                if (trans_vtst(ctx, &u.f_decode23)) return true;
                break;
            }
            break;
        }
        break;
    case 0x2:
        /* ...10... ........ ........ ........ */
        switch ((insn >> 25) & 0x3) {
        case 0x0:
            /* ...1000. ........ ........ ........ */
            /* hive64.decode:110 */
            decode_extract_decode_Fmt_12(ctx, &u.f_decode11, insn);
            if (trans_lea(ctx, &u.f_decode11)) return true;
            break;
        case 0x1:
            /* ...1001. ........ ........ ........ */
            decode_extract_decode_Fmt_13(ctx, &u.f_decode12, insn);
            switch ((insn >> 16) & 0x7) {
            case 0x0:
                /* ...1001. .....000 ........ ........ */
                /* hive64.decode:111 */
                if (trans_movz_0(ctx, &u.f_decode12)) return true;
                break;
            case 0x1:
                /* ...1001. .....001 ........ ........ */
                /* hive64.decode:112 */
                if (trans_movz_16(ctx, &u.f_decode12)) return true;
                break;
            case 0x2:
                /* ...1001. .....010 ........ ........ */
                /* hive64.decode:113 */
                if (trans_movz_32(ctx, &u.f_decode12)) return true;
                break;
            case 0x3:
                /* ...1001. .....011 ........ ........ */
                /* hive64.decode:114 */
                if (trans_movz_48(ctx, &u.f_decode12)) return true;
                break;
            case 0x4:
                /* ...1001. .....100 ........ ........ */
                /* hive64.decode:115 */
                if (trans_movk_0(ctx, &u.f_decode12)) return true;
                break;
            case 0x5:
                /* ...1001. .....101 ........ ........ */
                /* hive64.decode:116 */
                if (trans_movk_16(ctx, &u.f_decode12)) return true;
                break;
            case 0x6:
                /* ...1001. .....110 ........ ........ */
                /* hive64.decode:117 */
                if (trans_movk_32(ctx, &u.f_decode12)) return true;
                break;
            case 0x7:
                /* ...1001. .....111 ........ ........ */
                /* hive64.decode:118 */
                if (trans_movk_48(ctx, &u.f_decode12)) return true;
                break;
            }
            break;
        case 0x2:
            /* ...1010. ........ ........ ........ */
            switch ((insn >> 17) & 0x7) {
            case 0x0:
                /* ...1010. ....000. ........ ........ */
                /* hive64.decode:120 */
                decode_extract_decode_Fmt_14(ctx, &u.f_decode13, insn);
                if (trans_ldr_reg(ctx, &u.f_decode13)) return true;
                break;
            case 0x1:
                /* ...1010. ....001. ........ ........ */
                /* hive64.decode:121 */
                decode_extract_decode_Fmt_14(ctx, &u.f_decode13, insn);
                if (trans_ldr_reg_update(ctx, &u.f_decode13)) return true;
                break;
            case 0x2:
                /* ...1010. ....010. ........ ........ */
                /* hive64.decode:122 */
                decode_extract_decode_Fmt_15(ctx, &u.f_decode14, insn);
                if (trans_ldr_imm(ctx, &u.f_decode14)) return true;
                break;
            case 0x3:
                /* ...1010. ....011. ........ ........ */
                /* hive64.decode:123 */
                decode_extract_decode_Fmt_15(ctx, &u.f_decode14, insn);
                if (trans_ldr_imm_update(ctx, &u.f_decode14)) return true;
                break;
            case 0x4:
                /* ...1010. ....100. ........ ........ */
                /* hive64.decode:124 */
                decode_extract_decode_Fmt_14(ctx, &u.f_decode13, insn);
                if (trans_str_reg(ctx, &u.f_decode13)) return true;
                break;
            case 0x5:
                /* ...1010. ....101. ........ ........ */
                /* hive64.decode:125 */
                decode_extract_decode_Fmt_14(ctx, &u.f_decode13, insn);
                if (trans_str_reg_update(ctx, &u.f_decode13)) return true;
                break;
            case 0x6:
                /* ...1010. ....110. ........ ........ */
                /* hive64.decode:126 */
                decode_extract_decode_Fmt_15(ctx, &u.f_decode14, insn);
                if (trans_str_imm(ctx, &u.f_decode14)) return true;
                break;
            case 0x7:
                /* ...1010. ....111. ........ ........ */
                /* hive64.decode:127 */
                decode_extract_decode_Fmt_15(ctx, &u.f_decode14, insn);
                if (trans_str_imm_update(ctx, &u.f_decode14)) return true;
                break;
            }
            break;
        case 0x3:
            /* ...1011. ........ ........ ........ */
            decode_extract_decode_Fmt_16(ctx, &u.f_decode11, insn);
            switch ((insn >> 19) & 0x1) {
            case 0x0:
                /* ...1011. ....0... ........ ........ */
                /* hive64.decode:128 */
                if (trans_ldr_pc_rel(ctx, &u.f_decode11)) return true;
                break;
            case 0x1:
                /* ...1011. ....1... ........ ........ */
                /* hive64.decode:129 */
                if (trans_str_pc_rel(ctx, &u.f_decode11)) return true;
                break;
            }
            break;
        }
        break;
    case 0x3:
        /* ...11... ........ ........ ........ */
        switch ((insn >> 22) & 0x1f) {
        case 0x0:
            /* ...11000 00...... ........ ........ */
            /* hive64.decode:99 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (trans_cpuid(ctx, &u.f_decode4)) return true;
            break;
        case 0x1:
            /* ...11000 01...... ........ ........ */
            /* hive64.decode:58 */
            decode_extract_decode_Fmt_8(ctx, &u.f_decode8, insn);
            if (trans_prefix(ctx, &u.f_decode8)) return true;
            break;
        case 0x2:
            /* ...11000 10...... ........ ........ */
            /* hive64.decode:100 */
            decode_extract_decode_Fmt_10(ctx, &u.f_decode1, insn);
            if (trans_zeroupper(ctx, &u.f_decode1)) return true;
            break;
        case 0x3:
            /* ...11000 11...... ........ ........ */
            /* hive64.decode:101 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (trans_sret(ctx, &u.f_decode4)) return true;
            break;
        case 0x4:
            /* ...11001 00...... ........ ........ */
            /* hive64.decode:102 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (trans_hret(ctx, &u.f_decode4)) return true;
            break;
        case 0x5:
            /* ...11001 01...... ........ ........ */
            /* hive64.decode:103 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (trans_iret(ctx, &u.f_decode4)) return true;
            break;
        case 0x6:
            /* ...11001 10...... ........ ........ */
            /* hive64.decode:104 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (trans_svc(ctx, &u.f_decode4)) return true;
            break;
        case 0x7:
            /* ...11001 11...... ........ ........ */
            /* hive64.decode:105 */
            decode_extract_decode_Fmt_11(ctx, &u.f_decode10, insn);
            if (trans_mov_cr_r(ctx, &u.f_decode10)) return true;
            break;
        case 0x8:
            /* ...11010 00...... ........ ........ */
            /* hive64.decode:106 */
            decode_extract_decode_Fmt_11(ctx, &u.f_decode10, insn);
            if (trans_mov_r_cr(ctx, &u.f_decode10)) return true;
            break;
        case 0x9:
            /* ...11010 01...... ........ ........ */
            /* hive64.decode:107 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (trans_hexit(ctx, &u.f_decode4)) return true;
            break;
        case 0xa:
            /* ...11010 10...... ........ ........ */
            /* hive64.decode:108 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (trans_sexit(ctx, &u.f_decode4)) return true;
            break;
        }
        break;
    }
    return false;
}
