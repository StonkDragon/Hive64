/* This file is autogenerated by scripts/decodetree.py.  */

typedef struct {
    int rel;
} arg_decode0;

typedef struct {
    int r1;
} arg_decode1;

typedef struct {
    int r1;
    int size;
    int r2;
    int shift;
    int r3;
} arg_decode10;

typedef struct {
    int r1;
    int size;
    int r2;
    int imm;
} arg_decode11;

typedef struct {
    int r1;
    int size;
    int rel;
} arg_decode12;

typedef struct {
} arg_decode13;

typedef struct {
    int what;
} arg_decode14;

typedef struct {
    int size;
    int r1;
} arg_decode15;

typedef struct {
    int cr1;
    int r1;
} arg_decode16;

typedef struct {
    int r1;
    int r2;
    int r3;
} arg_decode17;

typedef struct {
    int r1;
    int r2;
} arg_decode18;

typedef struct {
    int r1;
    int r2;
    int size;
    int cond;
    int r3;
} arg_decode19;

typedef struct {
    int r1;
    int r2;
    int size;
    int r3;
} arg_decode2;

typedef struct {
    int r1;
    int r2;
    int count;
    int start;
} arg_decode20;

typedef struct {
    int type;
    int v1;
    int v2;
    int v3;
} arg_decode21;

typedef struct {
    int type;
    int v1;
    int slot;
    int r2;
} arg_decode22;

typedef struct {
    int type;
    int v1;
    int v2;
} arg_decode23;

typedef struct {
    int type;
    int v1;
    int v2;
    int target;
} arg_decode24;

typedef struct {
    int type;
    int v1;
    int r1;
} arg_decode25;

typedef struct {
    int r1;
    int v1;
    int imm;
} arg_decode26;

typedef struct {
    int r1;
    int v1;
    int r2;
} arg_decode27;

typedef struct {
    int type;
    int v1;
    int v2;
    int cond;
    int v3;
} arg_decode28;

typedef struct {
    int type;
    int v1;
    int v2;
    int check_sign;
} arg_decode29;

typedef struct {
    int r2;
    int size;
    int r3;
} arg_decode3;

typedef struct {
    int type;
    int v1;
    int v2;
    int is_signed;
    int v3;
} arg_decode30;

typedef struct {
    int type;
    int v1;
    int r2;
} arg_decode31;

typedef struct {
    int r1;
    int r2;
    int size;
    int imm8;
} arg_decode4;

typedef struct {
    int r2;
    int size;
    int imm8;
} arg_decode5;

typedef struct {
    int r1;
    int r2;
    int size;
} arg_decode6;

typedef struct {
    int r1;
    int r2;
    int size;
    int to;
} arg_decode7;

typedef struct {
    int r1;
    int rel;
} arg_decode8;

typedef struct {
    int r1;
    int imm;
} arg_decode9;

typedef arg_decode0 arg_branch;
bool hive64_branch(DisasContext *ctx, arg_branch *a);
typedef arg_decode0 arg_branch_link;
bool hive64_branch_link(DisasContext *ctx, arg_branch_link *a);
typedef arg_decode1 arg_branch_reg;
bool hive64_branch_reg(DisasContext *ctx, arg_branch_reg *a);
typedef arg_decode1 arg_branch_reg_link;
bool hive64_branch_reg_link(DisasContext *ctx, arg_branch_reg_link *a);
typedef arg_decode2 arg_add_reg;
bool hive64_add_reg(DisasContext *ctx, arg_add_reg *a);
typedef arg_decode2 arg_sub_reg;
bool hive64_sub_reg(DisasContext *ctx, arg_sub_reg *a);
typedef arg_decode3 arg_cmp_reg;
bool hive64_cmp_reg(DisasContext *ctx, arg_cmp_reg *a);
typedef arg_decode2 arg_mul_reg;
bool hive64_mul_reg(DisasContext *ctx, arg_mul_reg *a);
typedef arg_decode2 arg_div_reg;
bool hive64_div_reg(DisasContext *ctx, arg_div_reg *a);
typedef arg_decode2 arg_mod_reg;
bool hive64_mod_reg(DisasContext *ctx, arg_mod_reg *a);
typedef arg_decode2 arg_divs_reg;
bool hive64_divs_reg(DisasContext *ctx, arg_divs_reg *a);
typedef arg_decode2 arg_mods_reg;
bool hive64_mods_reg(DisasContext *ctx, arg_mods_reg *a);
typedef arg_decode2 arg_and_reg;
bool hive64_and_reg(DisasContext *ctx, arg_and_reg *a);
typedef arg_decode3 arg_tst_reg;
bool hive64_tst_reg(DisasContext *ctx, arg_tst_reg *a);
typedef arg_decode2 arg_or_reg;
bool hive64_or_reg(DisasContext *ctx, arg_or_reg *a);
typedef arg_decode2 arg_xor_reg;
bool hive64_xor_reg(DisasContext *ctx, arg_xor_reg *a);
typedef arg_decode2 arg_shl_reg;
bool hive64_shl_reg(DisasContext *ctx, arg_shl_reg *a);
typedef arg_decode2 arg_shr_reg;
bool hive64_shr_reg(DisasContext *ctx, arg_shr_reg *a);
typedef arg_decode2 arg_sar_reg;
bool hive64_sar_reg(DisasContext *ctx, arg_sar_reg *a);
typedef arg_decode2 arg_rol_reg;
bool hive64_rol_reg(DisasContext *ctx, arg_rol_reg *a);
typedef arg_decode2 arg_ror_reg;
bool hive64_ror_reg(DisasContext *ctx, arg_ror_reg *a);
typedef arg_decode4 arg_add_imm;
bool hive64_add_imm(DisasContext *ctx, arg_add_imm *a);
typedef arg_decode4 arg_sub_imm;
bool hive64_sub_imm(DisasContext *ctx, arg_sub_imm *a);
typedef arg_decode5 arg_cmp_imm;
bool hive64_cmp_imm(DisasContext *ctx, arg_cmp_imm *a);
typedef arg_decode4 arg_mul_imm;
bool hive64_mul_imm(DisasContext *ctx, arg_mul_imm *a);
typedef arg_decode4 arg_div_imm;
bool hive64_div_imm(DisasContext *ctx, arg_div_imm *a);
typedef arg_decode4 arg_mod_imm;
bool hive64_mod_imm(DisasContext *ctx, arg_mod_imm *a);
typedef arg_decode4 arg_divs_imm;
bool hive64_divs_imm(DisasContext *ctx, arg_divs_imm *a);
typedef arg_decode4 arg_mods_imm;
bool hive64_mods_imm(DisasContext *ctx, arg_mods_imm *a);
typedef arg_decode4 arg_and_imm;
bool hive64_and_imm(DisasContext *ctx, arg_and_imm *a);
typedef arg_decode5 arg_tst_imm;
bool hive64_tst_imm(DisasContext *ctx, arg_tst_imm *a);
typedef arg_decode4 arg_or_imm;
bool hive64_or_imm(DisasContext *ctx, arg_or_imm *a);
typedef arg_decode4 arg_xor_imm;
bool hive64_xor_imm(DisasContext *ctx, arg_xor_imm *a);
typedef arg_decode4 arg_shl_imm;
bool hive64_shl_imm(DisasContext *ctx, arg_shl_imm *a);
typedef arg_decode4 arg_shr_imm;
bool hive64_shr_imm(DisasContext *ctx, arg_shr_imm *a);
typedef arg_decode4 arg_sar_imm;
bool hive64_sar_imm(DisasContext *ctx, arg_sar_imm *a);
typedef arg_decode4 arg_rol_imm;
bool hive64_rol_imm(DisasContext *ctx, arg_rol_imm *a);
typedef arg_decode4 arg_ror_imm;
bool hive64_ror_imm(DisasContext *ctx, arg_ror_imm *a);
typedef arg_decode6 arg_neg;
bool hive64_neg(DisasContext *ctx, arg_neg *a);
typedef arg_decode6 arg_not;
bool hive64_not(DisasContext *ctx, arg_not *a);
typedef arg_decode7 arg_extend;
bool hive64_extend(DisasContext *ctx, arg_extend *a);
typedef arg_decode6 arg_swe;
bool hive64_swe(DisasContext *ctx, arg_swe *a);
typedef arg_decode8 arg_lea;
bool hive64_lea(DisasContext *ctx, arg_lea *a);
typedef arg_decode9 arg_movz_0;
bool hive64_movz_0(DisasContext *ctx, arg_movz_0 *a);
typedef arg_decode9 arg_movz_16;
bool hive64_movz_16(DisasContext *ctx, arg_movz_16 *a);
typedef arg_decode9 arg_movz_32;
bool hive64_movz_32(DisasContext *ctx, arg_movz_32 *a);
typedef arg_decode9 arg_movz_48;
bool hive64_movz_48(DisasContext *ctx, arg_movz_48 *a);
typedef arg_decode9 arg_movk_0;
bool hive64_movk_0(DisasContext *ctx, arg_movk_0 *a);
typedef arg_decode9 arg_movk_16;
bool hive64_movk_16(DisasContext *ctx, arg_movk_16 *a);
typedef arg_decode9 arg_movk_32;
bool hive64_movk_32(DisasContext *ctx, arg_movk_32 *a);
typedef arg_decode9 arg_movk_48;
bool hive64_movk_48(DisasContext *ctx, arg_movk_48 *a);
typedef arg_decode10 arg_ldr_reg;
bool hive64_ldr_reg(DisasContext *ctx, arg_ldr_reg *a);
typedef arg_decode10 arg_ldr_reg_update;
bool hive64_ldr_reg_update(DisasContext *ctx, arg_ldr_reg_update *a);
typedef arg_decode11 arg_ldr_imm;
bool hive64_ldr_imm(DisasContext *ctx, arg_ldr_imm *a);
typedef arg_decode11 arg_ldr_imm_update;
bool hive64_ldr_imm_update(DisasContext *ctx, arg_ldr_imm_update *a);
typedef arg_decode10 arg_str_reg;
bool hive64_str_reg(DisasContext *ctx, arg_str_reg *a);
typedef arg_decode10 arg_str_reg_update;
bool hive64_str_reg_update(DisasContext *ctx, arg_str_reg_update *a);
typedef arg_decode11 arg_str_imm;
bool hive64_str_imm(DisasContext *ctx, arg_str_imm *a);
typedef arg_decode11 arg_str_imm_update;
bool hive64_str_imm_update(DisasContext *ctx, arg_str_imm_update *a);
typedef arg_decode12 arg_ldr_pc_rel;
bool hive64_ldr_pc_rel(DisasContext *ctx, arg_ldr_pc_rel *a);
typedef arg_decode12 arg_str_pc_rel;
bool hive64_str_pc_rel(DisasContext *ctx, arg_str_pc_rel *a);
typedef arg_decode13 arg_cpuid;
bool hive64_cpuid(DisasContext *ctx, arg_cpuid *a);
typedef arg_decode14 arg_brk;
bool hive64_brk(DisasContext *ctx, arg_brk *a);
typedef arg_decode15 arg_zeroupper;
bool hive64_zeroupper(DisasContext *ctx, arg_zeroupper *a);
typedef arg_decode13 arg_sret;
bool hive64_sret(DisasContext *ctx, arg_sret *a);
typedef arg_decode13 arg_hret;
bool hive64_hret(DisasContext *ctx, arg_hret *a);
typedef arg_decode13 arg_iret;
bool hive64_iret(DisasContext *ctx, arg_iret *a);
typedef arg_decode13 arg_svc;
bool hive64_svc(DisasContext *ctx, arg_svc *a);
typedef arg_decode16 arg_mov_cr_r;
bool hive64_mov_cr_r(DisasContext *ctx, arg_mov_cr_r *a);
typedef arg_decode16 arg_mov_r_cr;
bool hive64_mov_r_cr(DisasContext *ctx, arg_mov_r_cr *a);
typedef arg_decode13 arg_hexit;
bool hive64_hexit(DisasContext *ctx, arg_hexit *a);
typedef arg_decode13 arg_sexit;
bool hive64_sexit(DisasContext *ctx, arg_sexit *a);
typedef arg_decode17 arg_fadd;
bool hive64_fadd(DisasContext *ctx, arg_fadd *a);
typedef arg_decode17 arg_fsub;
bool hive64_fsub(DisasContext *ctx, arg_fsub *a);
typedef arg_decode17 arg_fcmp;
bool hive64_fcmp(DisasContext *ctx, arg_fcmp *a);
typedef arg_decode17 arg_fmul;
bool hive64_fmul(DisasContext *ctx, arg_fmul *a);
typedef arg_decode17 arg_fdiv;
bool hive64_fdiv(DisasContext *ctx, arg_fdiv *a);
typedef arg_decode17 arg_fmod;
bool hive64_fmod(DisasContext *ctx, arg_fmod *a);
typedef arg_decode18 arg_i2f;
bool hive64_i2f(DisasContext *ctx, arg_i2f *a);
typedef arg_decode18 arg_f2i;
bool hive64_f2i(DisasContext *ctx, arg_f2i *a);
typedef arg_decode18 arg_fsin;
bool hive64_fsin(DisasContext *ctx, arg_fsin *a);
typedef arg_decode18 arg_fsqrt;
bool hive64_fsqrt(DisasContext *ctx, arg_fsqrt *a);
typedef arg_decode18 arg_f2d;
bool hive64_f2d(DisasContext *ctx, arg_f2d *a);
typedef arg_decode17 arg_dadd;
bool hive64_dadd(DisasContext *ctx, arg_dadd *a);
typedef arg_decode17 arg_dsub;
bool hive64_dsub(DisasContext *ctx, arg_dsub *a);
typedef arg_decode17 arg_dcmp;
bool hive64_dcmp(DisasContext *ctx, arg_dcmp *a);
typedef arg_decode17 arg_dmul;
bool hive64_dmul(DisasContext *ctx, arg_dmul *a);
typedef arg_decode17 arg_ddiv;
bool hive64_ddiv(DisasContext *ctx, arg_ddiv *a);
typedef arg_decode17 arg_dmod;
bool hive64_dmod(DisasContext *ctx, arg_dmod *a);
typedef arg_decode18 arg_i2d;
bool hive64_i2d(DisasContext *ctx, arg_i2d *a);
typedef arg_decode18 arg_d2i;
bool hive64_d2i(DisasContext *ctx, arg_d2i *a);
typedef arg_decode18 arg_dsin;
bool hive64_dsin(DisasContext *ctx, arg_dsin *a);
typedef arg_decode18 arg_dsqrt;
bool hive64_dsqrt(DisasContext *ctx, arg_dsqrt *a);
typedef arg_decode18 arg_d2f;
bool hive64_d2f(DisasContext *ctx, arg_d2f *a);
typedef arg_decode19 arg_cswp;
bool hive64_cswp(DisasContext *ctx, arg_cswp *a);
typedef arg_decode6 arg_xchg;
bool hive64_xchg(DisasContext *ctx, arg_xchg *a);
typedef arg_decode20 arg_ubxt;
bool hive64_ubxt(DisasContext *ctx, arg_ubxt *a);
typedef arg_decode20 arg_sbxt;
bool hive64_sbxt(DisasContext *ctx, arg_sbxt *a);
typedef arg_decode20 arg_ubdp;
bool hive64_ubdp(DisasContext *ctx, arg_ubdp *a);
typedef arg_decode20 arg_sbdp;
bool hive64_sbdp(DisasContext *ctx, arg_sbdp *a);
typedef arg_decode21 arg_vadd;
bool hive64_vadd(DisasContext *ctx, arg_vadd *a);
typedef arg_decode21 arg_vsub;
bool hive64_vsub(DisasContext *ctx, arg_vsub *a);
typedef arg_decode21 arg_vmul;
bool hive64_vmul(DisasContext *ctx, arg_vmul *a);
typedef arg_decode21 arg_vdiv;
bool hive64_vdiv(DisasContext *ctx, arg_vdiv *a);
typedef arg_decode21 arg_vaddsub;
bool hive64_vaddsub(DisasContext *ctx, arg_vaddsub *a);
typedef arg_decode21 arg_vmadd;
bool hive64_vmadd(DisasContext *ctx, arg_vmadd *a);
typedef arg_decode22 arg_vmov_reg;
bool hive64_vmov_reg(DisasContext *ctx, arg_vmov_reg *a);
typedef arg_decode22 arg_vmov_reg2;
bool hive64_vmov_reg2(DisasContext *ctx, arg_vmov_reg2 *a);
typedef arg_decode23 arg_vmov;
bool hive64_vmov(DisasContext *ctx, arg_vmov *a);
typedef arg_decode24 arg_vconv;
bool hive64_vconv(DisasContext *ctx, arg_vconv *a);
typedef arg_decode25 arg_vlen;
bool hive64_vlen(DisasContext *ctx, arg_vlen *a);
typedef arg_decode26 arg_vldr_imm;
bool hive64_vldr_imm(DisasContext *ctx, arg_vldr_imm *a);
typedef arg_decode26 arg_vldr_imm_update;
bool hive64_vldr_imm_update(DisasContext *ctx, arg_vldr_imm_update *a);
typedef arg_decode26 arg_vstr_imm;
bool hive64_vstr_imm(DisasContext *ctx, arg_vstr_imm *a);
typedef arg_decode26 arg_vstr_imm_update;
bool hive64_vstr_imm_update(DisasContext *ctx, arg_vstr_imm_update *a);
typedef arg_decode27 arg_vldr_reg;
bool hive64_vldr_reg(DisasContext *ctx, arg_vldr_reg *a);
typedef arg_decode27 arg_vldr_reg_update;
bool hive64_vldr_reg_update(DisasContext *ctx, arg_vldr_reg_update *a);
typedef arg_decode27 arg_vstr_reg;
bool hive64_vstr_reg(DisasContext *ctx, arg_vstr_reg *a);
typedef arg_decode27 arg_vstr_reg_update;
bool hive64_vstr_reg_update(DisasContext *ctx, arg_vstr_reg_update *a);
typedef arg_decode21 arg_vand;
bool hive64_vand(DisasContext *ctx, arg_vand *a);
typedef arg_decode21 arg_vor;
bool hive64_vor(DisasContext *ctx, arg_vor *a);
typedef arg_decode21 arg_vxor;
bool hive64_vxor(DisasContext *ctx, arg_vxor *a);
typedef arg_decode28 arg_vcmp;
bool hive64_vcmp(DisasContext *ctx, arg_vcmp *a);
typedef arg_decode29 arg_vminmax;
bool hive64_vminmax(DisasContext *ctx, arg_vminmax *a);
typedef arg_decode23 arg_vabs;
bool hive64_vabs(DisasContext *ctx, arg_vabs *a);
typedef arg_decode21 arg_vshl;
bool hive64_vshl(DisasContext *ctx, arg_vshl *a);
typedef arg_decode30 arg_vshr;
bool hive64_vshr(DisasContext *ctx, arg_vshr *a);
typedef arg_decode23 arg_vsqrt;
bool hive64_vsqrt(DisasContext *ctx, arg_vsqrt *a);
typedef arg_decode21 arg_vmod;
bool hive64_vmod(DisasContext *ctx, arg_vmod *a);
typedef arg_decode31 arg_vmovall;
bool hive64_vmovall(DisasContext *ctx, arg_vmovall *a);
typedef arg_decode28 arg_vtst;
bool hive64_vtst(DisasContext *ctx, arg_vtst *a);

static void decode_extract_decode_Fmt_0(DisasContext *ctx, arg_decode0 *a, uint32_t insn)
{
    a->rel = sextract32(insn, 0, 25);
}

static void decode_extract_decode_Fmt_1(DisasContext *ctx, arg_decode1 *a, uint32_t insn)
{
    a->r1 = extract32(insn, 20, 5);
}

static void decode_extract_decode_Fmt_10(DisasContext *ctx, arg_decode10 *a, uint32_t insn)
{
    a->r2 = extract32(insn, 10, 5);
    a->r3 = extract32(insn, 0, 5);
    a->r1 = extract32(insn, 20, 5);
    a->shift = extract32(insn, 5, 3);
    a->size = extract32(insn, 18, 2);
}

static void decode_extract_decode_Fmt_11(DisasContext *ctx, arg_decode11 *a, uint32_t insn)
{
    a->size = extract32(insn, 18, 2);
    a->imm = sextract32(insn, 0, 10);
    a->r1 = extract32(insn, 20, 5);
    a->r2 = extract32(insn, 10, 5);
}

static void decode_extract_decode_Fmt_12(DisasContext *ctx, arg_decode12 *a, uint32_t insn)
{
    a->size = extract32(insn, 18, 2);
    a->rel = sextract32(insn, 0, 17);
    a->r1 = extract32(insn, 20, 5);
}

static void decode_extract_decode_Fmt_13(DisasContext *ctx, arg_decode13 *a, uint32_t insn)
{
}

static void decode_extract_decode_Fmt_14(DisasContext *ctx, arg_decode14 *a, uint32_t insn)
{
    a->what = extract32(insn, 0, 16);
}

static void decode_extract_decode_Fmt_15(DisasContext *ctx, arg_decode15 *a, uint32_t insn)
{
    a->size = extract32(insn, 5, 2);
    a->r1 = extract32(insn, 0, 5);
}

static void decode_extract_decode_Fmt_16(DisasContext *ctx, arg_decode16 *a, uint32_t insn)
{
    a->cr1 = extract32(insn, 5, 5);
    a->r1 = extract32(insn, 0, 5);
}

static void decode_extract_decode_Fmt_17(DisasContext *ctx, arg_decode17 *a, uint32_t insn)
{
    a->r3 = extract32(insn, 0, 5);
    a->r1 = extract32(insn, 10, 5);
    a->r2 = extract32(insn, 5, 5);
}

static void decode_extract_decode_Fmt_18(DisasContext *ctx, arg_decode18 *a, uint32_t insn)
{
    a->r1 = extract32(insn, 10, 5);
    a->r2 = extract32(insn, 5, 5);
}

static void decode_extract_decode_Fmt_19(DisasContext *ctx, arg_decode19 *a, uint32_t insn)
{
    a->r2 = extract32(insn, 12, 5);
    a->r3 = extract32(insn, 0, 5);
    a->cond = extract32(insn, 5, 3);
    a->r1 = extract32(insn, 17, 5);
    a->size = extract32(insn, 10, 2);
}

static void decode_extract_decode_Fmt_2(DisasContext *ctx, arg_decode2 *a, uint32_t insn)
{
    a->size = extract32(insn, 10, 2);
    a->r3 = extract32(insn, 0, 5);
    a->r1 = extract32(insn, 17, 5);
    a->r2 = extract32(insn, 12, 5);
}

static void decode_extract_decode_Fmt_20(DisasContext *ctx, arg_decode20 *a, uint32_t insn)
{
    a->count = extract32(insn, 6, 6);
    a->start = extract32(insn, 0, 6);
    a->r1 = extract32(insn, 17, 5);
    a->r2 = extract32(insn, 12, 5);
}

static void decode_extract_decode_Fmt_21(DisasContext *ctx, arg_decode21 *a, uint32_t insn)
{
    a->v1 = extract32(insn, 12, 4);
    a->v3 = extract32(insn, 0, 4);
    a->v2 = extract32(insn, 8, 4);
    a->type = extract32(insn, 16, 3);
}

static void decode_extract_decode_Fmt_22(DisasContext *ctx, arg_decode22 *a, uint32_t insn)
{
    a->v1 = extract32(insn, 12, 4);
    a->slot = extract32(insn, 5, 6);
    a->type = extract32(insn, 16, 3);
    a->r2 = extract32(insn, 0, 5);
}

static void decode_extract_decode_Fmt_23(DisasContext *ctx, arg_decode23 *a, uint32_t insn)
{
    a->v1 = extract32(insn, 12, 4);
    a->v2 = extract32(insn, 8, 4);
    a->type = extract32(insn, 16, 3);
}

static void decode_extract_decode_Fmt_24(DisasContext *ctx, arg_decode24 *a, uint32_t insn)
{
    a->v1 = extract32(insn, 12, 4);
    a->target = extract32(insn, 0, 3);
    a->v2 = extract32(insn, 8, 4);
    a->type = extract32(insn, 16, 3);
}

static void decode_extract_decode_Fmt_25(DisasContext *ctx, arg_decode25 *a, uint32_t insn)
{
    a->v1 = extract32(insn, 12, 4);
    a->r1 = extract32(insn, 0, 5);
    a->type = extract32(insn, 16, 3);
}

static void decode_extract_decode_Fmt_26(DisasContext *ctx, arg_decode26 *a, uint32_t insn)
{
    a->v1 = extract32(insn, 8, 4);
    a->r1 = extract32(insn, 12, 5);
    a->imm = sextract32(insn, 0, 8);
}

static void decode_extract_decode_Fmt_27(DisasContext *ctx, arg_decode27 *a, uint32_t insn)
{
    a->v1 = extract32(insn, 8, 4);
    a->r1 = extract32(insn, 12, 5);
    a->r2 = extract32(insn, 0, 5);
}

static void decode_extract_decode_Fmt_28(DisasContext *ctx, arg_decode28 *a, uint32_t insn)
{
    a->v3 = extract32(insn, 0, 4);
    a->v1 = extract32(insn, 12, 4);
    a->v2 = extract32(insn, 8, 4);
    a->cond = extract32(insn, 4, 3);
    a->type = extract32(insn, 16, 3);
}

static void decode_extract_decode_Fmt_29(DisasContext *ctx, arg_decode29 *a, uint32_t insn)
{
    a->v1 = extract32(insn, 12, 4);
    a->v2 = extract32(insn, 8, 4);
    a->type = extract32(insn, 16, 3);
    a->check_sign = extract32(insn, 0, 1);
}

static void decode_extract_decode_Fmt_3(DisasContext *ctx, arg_decode3 *a, uint32_t insn)
{
    a->size = extract32(insn, 10, 2);
    a->r3 = extract32(insn, 0, 5);
    a->r2 = extract32(insn, 12, 5);
}

static void decode_extract_decode_Fmt_30(DisasContext *ctx, arg_decode30 *a, uint32_t insn)
{
    a->v3 = extract32(insn, 0, 4);
    a->v1 = extract32(insn, 12, 4);
    a->v2 = extract32(insn, 8, 4);
    a->is_signed = extract32(insn, 4, 1);
    a->type = extract32(insn, 16, 3);
}

static void decode_extract_decode_Fmt_31(DisasContext *ctx, arg_decode31 *a, uint32_t insn)
{
    a->v1 = extract32(insn, 12, 4);
    a->type = extract32(insn, 16, 3);
    a->r2 = extract32(insn, 0, 5);
}

static void decode_extract_decode_Fmt_4(DisasContext *ctx, arg_decode4 *a, uint32_t insn)
{
    a->size = extract32(insn, 10, 2);
    a->imm8 = extract32(insn, 0, 8);
    a->r1 = extract32(insn, 17, 5);
    a->r2 = extract32(insn, 12, 5);
}

static void decode_extract_decode_Fmt_5(DisasContext *ctx, arg_decode5 *a, uint32_t insn)
{
    a->size = extract32(insn, 10, 2);
    a->imm8 = extract32(insn, 0, 8);
    a->r2 = extract32(insn, 12, 5);
}

static void decode_extract_decode_Fmt_6(DisasContext *ctx, arg_decode6 *a, uint32_t insn)
{
    a->size = extract32(insn, 10, 2);
    a->r1 = extract32(insn, 17, 5);
    a->r2 = extract32(insn, 12, 5);
}

static void decode_extract_decode_Fmt_7(DisasContext *ctx, arg_decode7 *a, uint32_t insn)
{
    a->size = extract32(insn, 10, 2);
    a->to = extract32(insn, 0, 2);
    a->r1 = extract32(insn, 17, 5);
    a->r2 = extract32(insn, 12, 5);
}

static void decode_extract_decode_Fmt_8(DisasContext *ctx, arg_decode8 *a, uint32_t insn)
{
    a->rel = sextract32(insn, 0, 20);
    a->r1 = extract32(insn, 20, 5);
}

static void decode_extract_decode_Fmt_9(DisasContext *ctx, arg_decode9 *a, uint32_t insn)
{
    a->r1 = extract32(insn, 20, 5);
    a->imm = extract32(insn, 0, 16);
}

static bool decode(DisasContext *ctx, uint32_t insn)
{
    union {
        arg_decode0 f_decode0;
        arg_decode1 f_decode1;
        arg_decode10 f_decode10;
        arg_decode11 f_decode11;
        arg_decode12 f_decode12;
        arg_decode13 f_decode13;
        arg_decode14 f_decode14;
        arg_decode15 f_decode15;
        arg_decode16 f_decode16;
        arg_decode17 f_decode17;
        arg_decode18 f_decode18;
        arg_decode19 f_decode19;
        arg_decode2 f_decode2;
        arg_decode20 f_decode20;
        arg_decode21 f_decode21;
        arg_decode22 f_decode22;
        arg_decode23 f_decode23;
        arg_decode24 f_decode24;
        arg_decode25 f_decode25;
        arg_decode26 f_decode26;
        arg_decode27 f_decode27;
        arg_decode28 f_decode28;
        arg_decode29 f_decode29;
        arg_decode3 f_decode3;
        arg_decode30 f_decode30;
        arg_decode31 f_decode31;
        arg_decode4 f_decode4;
        arg_decode5 f_decode5;
        arg_decode6 f_decode6;
        arg_decode7 f_decode7;
        arg_decode8 f_decode8;
        arg_decode9 f_decode9;
    } u;

    switch ((insn >> 25) & 0xf) {
    case 0x0:
        /* ...0000. ........ ........ ........ */
        /* hive64.decode:10 */
        decode_extract_decode_Fmt_0(ctx, &u.f_decode0, insn);
        if (hive64_branch(ctx, &u.f_decode0)) return true;
        break;
    case 0x1:
        /* ...0001. ........ ........ ........ */
        /* hive64.decode:11 */
        decode_extract_decode_Fmt_0(ctx, &u.f_decode0, insn);
        if (hive64_branch_link(ctx, &u.f_decode0)) return true;
        break;
    case 0x2:
        /* ...0010. ........ ........ ........ */
        /* hive64.decode:12 */
        decode_extract_decode_Fmt_1(ctx, &u.f_decode1, insn);
        if (hive64_branch_reg(ctx, &u.f_decode1)) return true;
        break;
    case 0x3:
        /* ...0011. ........ ........ ........ */
        /* hive64.decode:13 */
        decode_extract_decode_Fmt_1(ctx, &u.f_decode1, insn);
        if (hive64_branch_reg_link(ctx, &u.f_decode1)) return true;
        break;
    case 0x4:
        /* ...0100. ........ ........ ........ */
        switch (insn & 0x01c00300) {
        case 0x00000000:
            /* ...01000 00...... ......00 ........ */
            /* hive64.decode:25 */
            decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
            if (hive64_add_reg(ctx, &u.f_decode2)) return true;
            break;
        case 0x00000100:
            /* ...01000 00...... ......01 ........ */
            /* hive64.decode:53 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (hive64_add_imm(ctx, &u.f_decode4)) return true;
            break;
        case 0x00800000:
            /* ...01000 10...... ......00 ........ */
            /* hive64.decode:26 */
            decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
            if (hive64_sub_reg(ctx, &u.f_decode2)) return true;
            break;
        case 0x00800100:
            /* ...01000 10...... ......01 ........ */
            /* hive64.decode:54 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (hive64_sub_imm(ctx, &u.f_decode4)) return true;
            break;
        case 0x00c00000:
            /* ...01000 11...... ......00 ........ */
            /* hive64.decode:27 */
            decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
            if (hive64_cmp_reg(ctx, &u.f_decode3)) return true;
            break;
        case 0x00c00100:
            /* ...01000 11...... ......01 ........ */
            /* hive64.decode:55 */
            decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
            if (hive64_cmp_imm(ctx, &u.f_decode5)) return true;
            break;
        case 0x01000000:
            /* ...01001 00...... ......00 ........ */
            /* hive64.decode:28 */
            decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
            if (hive64_mul_reg(ctx, &u.f_decode2)) return true;
            break;
        case 0x01000100:
            /* ...01001 00...... ......01 ........ */
            /* hive64.decode:56 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (hive64_mul_imm(ctx, &u.f_decode4)) return true;
            break;
        case 0x01800000:
            /* ...01001 10...... ......00 ........ */
            /* hive64.decode:29 */
            decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
            if (hive64_div_reg(ctx, &u.f_decode2)) return true;
            break;
        case 0x01800100:
            /* ...01001 10...... ......01 ........ */
            /* hive64.decode:57 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (hive64_div_imm(ctx, &u.f_decode4)) return true;
            break;
        case 0x01800200:
            /* ...01001 10...... ......10 ........ */
            /* hive64.decode:31 */
            decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
            if (hive64_divs_reg(ctx, &u.f_decode2)) return true;
            break;
        case 0x01800300:
            /* ...01001 10...... ......11 ........ */
            /* hive64.decode:59 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (hive64_divs_imm(ctx, &u.f_decode4)) return true;
            break;
        }
        break;
    case 0x5:
        /* ...0101. ........ ........ ........ */
        switch (insn & 0x01c00300) {
        case 0x00000000:
            /* ...01010 00...... ......00 ........ */
            /* hive64.decode:30 */
            decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
            if (hive64_mod_reg(ctx, &u.f_decode2)) return true;
            break;
        case 0x00000100:
            /* ...01010 00...... ......01 ........ */
            /* hive64.decode:58 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (hive64_mod_imm(ctx, &u.f_decode4)) return true;
            break;
        case 0x00000200:
            /* ...01010 00...... ......10 ........ */
            /* hive64.decode:32 */
            decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
            if (hive64_mods_reg(ctx, &u.f_decode2)) return true;
            break;
        case 0x00000300:
            /* ...01010 00...... ......11 ........ */
            /* hive64.decode:60 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (hive64_mods_imm(ctx, &u.f_decode4)) return true;
            break;
        case 0x00800000:
            /* ...01010 10...... ......00 ........ */
            /* hive64.decode:33 */
            decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
            if (hive64_and_reg(ctx, &u.f_decode2)) return true;
            break;
        case 0x00800100:
            /* ...01010 10...... ......01 ........ */
            /* hive64.decode:61 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (hive64_and_imm(ctx, &u.f_decode4)) return true;
            break;
        case 0x00c00000:
            /* ...01010 11...... ......00 ........ */
            /* hive64.decode:34 */
            decode_extract_decode_Fmt_3(ctx, &u.f_decode3, insn);
            if (hive64_tst_reg(ctx, &u.f_decode3)) return true;
            break;
        case 0x00c00100:
            /* ...01010 11...... ......01 ........ */
            /* hive64.decode:62 */
            decode_extract_decode_Fmt_5(ctx, &u.f_decode5, insn);
            if (hive64_tst_imm(ctx, &u.f_decode5)) return true;
            break;
        case 0x01000000:
            /* ...01011 00...... ......00 ........ */
            /* hive64.decode:35 */
            decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
            if (hive64_or_reg(ctx, &u.f_decode2)) return true;
            break;
        case 0x01000100:
            /* ...01011 00...... ......01 ........ */
            /* hive64.decode:63 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (hive64_or_imm(ctx, &u.f_decode4)) return true;
            break;
        case 0x01800000:
            /* ...01011 10...... ......00 ........ */
            /* hive64.decode:36 */
            decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
            if (hive64_xor_reg(ctx, &u.f_decode2)) return true;
            break;
        case 0x01800100:
            /* ...01011 10...... ......01 ........ */
            /* hive64.decode:64 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (hive64_xor_imm(ctx, &u.f_decode4)) return true;
            break;
        }
        break;
    case 0x6:
        /* ...0110. ........ ........ ........ */
        switch (insn & 0x01c00300) {
        case 0x00000000:
            /* ...01100 00...... ......00 ........ */
            /* hive64.decode:37 */
            decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
            if (hive64_shl_reg(ctx, &u.f_decode2)) return true;
            break;
        case 0x00000100:
            /* ...01100 00...... ......01 ........ */
            /* hive64.decode:65 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (hive64_shl_imm(ctx, &u.f_decode4)) return true;
            break;
        case 0x00800000:
            /* ...01100 10...... ......00 ........ */
            /* hive64.decode:38 */
            decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
            if (hive64_shr_reg(ctx, &u.f_decode2)) return true;
            break;
        case 0x00800100:
            /* ...01100 10...... ......01 ........ */
            /* hive64.decode:66 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (hive64_shr_imm(ctx, &u.f_decode4)) return true;
            break;
        case 0x00800200:
            /* ...01100 10...... ......10 ........ */
            /* hive64.decode:39 */
            decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
            if (hive64_sar_reg(ctx, &u.f_decode2)) return true;
            break;
        case 0x00800300:
            /* ...01100 10...... ......11 ........ */
            /* hive64.decode:67 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (hive64_sar_imm(ctx, &u.f_decode4)) return true;
            break;
        case 0x01000000:
            /* ...01101 00...... ......00 ........ */
            /* hive64.decode:40 */
            decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
            if (hive64_rol_reg(ctx, &u.f_decode2)) return true;
            break;
        case 0x01000100:
            /* ...01101 00...... ......01 ........ */
            /* hive64.decode:68 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (hive64_rol_imm(ctx, &u.f_decode4)) return true;
            break;
        case 0x01800000:
            /* ...01101 10...... ......00 ........ */
            /* hive64.decode:41 */
            decode_extract_decode_Fmt_2(ctx, &u.f_decode2, insn);
            if (hive64_ror_reg(ctx, &u.f_decode2)) return true;
            break;
        case 0x01800100:
            /* ...01101 10...... ......01 ........ */
            /* hive64.decode:69 */
            decode_extract_decode_Fmt_4(ctx, &u.f_decode4, insn);
            if (hive64_ror_imm(ctx, &u.f_decode4)) return true;
            break;
        }
        break;
    case 0x7:
        /* ...0111. ........ ........ ........ */
        switch (insn & 0x01c00300) {
        case 0x00000000:
            /* ...01110 00...... ......00 ........ */
            /* hive64.decode:71 */
            decode_extract_decode_Fmt_6(ctx, &u.f_decode6, insn);
            if (hive64_neg(ctx, &u.f_decode6)) return true;
            break;
        case 0x00800000:
            /* ...01110 10...... ......00 ........ */
            /* hive64.decode:72 */
            decode_extract_decode_Fmt_6(ctx, &u.f_decode6, insn);
            if (hive64_not(ctx, &u.f_decode6)) return true;
            break;
        case 0x01000100:
            /* ...01111 00...... ......01 ........ */
            /* hive64.decode:73 */
            decode_extract_decode_Fmt_7(ctx, &u.f_decode7, insn);
            if (hive64_extend(ctx, &u.f_decode7)) return true;
            break;
        case 0x01800000:
            /* ...01111 10...... ......00 ........ */
            /* hive64.decode:74 */
            decode_extract_decode_Fmt_6(ctx, &u.f_decode6, insn);
            if (hive64_swe(ctx, &u.f_decode6)) return true;
            break;
        }
        break;
    case 0x8:
        /* ...1000. ........ ........ ........ */
        /* hive64.decode:81 */
        decode_extract_decode_Fmt_8(ctx, &u.f_decode8, insn);
        if (hive64_lea(ctx, &u.f_decode8)) return true;
        break;
    case 0x9:
        /* ...1001. ........ ........ ........ */
        decode_extract_decode_Fmt_9(ctx, &u.f_decode9, insn);
        switch ((insn >> 16) & 0x7) {
        case 0x0:
            /* ...1001. .....000 ........ ........ */
            /* hive64.decode:95 */
            if (hive64_movz_0(ctx, &u.f_decode9)) return true;
            break;
        case 0x1:
            /* ...1001. .....001 ........ ........ */
            /* hive64.decode:96 */
            if (hive64_movz_16(ctx, &u.f_decode9)) return true;
            break;
        case 0x2:
            /* ...1001. .....010 ........ ........ */
            /* hive64.decode:97 */
            if (hive64_movz_32(ctx, &u.f_decode9)) return true;
            break;
        case 0x3:
            /* ...1001. .....011 ........ ........ */
            /* hive64.decode:98 */
            if (hive64_movz_48(ctx, &u.f_decode9)) return true;
            break;
        case 0x4:
            /* ...1001. .....100 ........ ........ */
            /* hive64.decode:99 */
            if (hive64_movk_0(ctx, &u.f_decode9)) return true;
            break;
        case 0x5:
            /* ...1001. .....101 ........ ........ */
            /* hive64.decode:100 */
            if (hive64_movk_16(ctx, &u.f_decode9)) return true;
            break;
        case 0x6:
            /* ...1001. .....110 ........ ........ */
            /* hive64.decode:101 */
            if (hive64_movk_32(ctx, &u.f_decode9)) return true;
            break;
        case 0x7:
            /* ...1001. .....111 ........ ........ */
            /* hive64.decode:102 */
            if (hive64_movk_48(ctx, &u.f_decode9)) return true;
            break;
        }
        break;
    case 0xa:
        /* ...1010. ........ ........ ........ */
        switch ((insn >> 15) & 0x7) {
        case 0x0:
            /* ...1010. ......00 0....... ........ */
            /* hive64.decode:130 */
            decode_extract_decode_Fmt_10(ctx, &u.f_decode10, insn);
            if (hive64_ldr_reg(ctx, &u.f_decode10)) return true;
            break;
        case 0x1:
            /* ...1010. ......00 1....... ........ */
            /* hive64.decode:131 */
            decode_extract_decode_Fmt_10(ctx, &u.f_decode10, insn);
            if (hive64_ldr_reg_update(ctx, &u.f_decode10)) return true;
            break;
        case 0x2:
            /* ...1010. ......01 0....... ........ */
            /* hive64.decode:132 */
            decode_extract_decode_Fmt_11(ctx, &u.f_decode11, insn);
            if (hive64_ldr_imm(ctx, &u.f_decode11)) return true;
            break;
        case 0x3:
            /* ...1010. ......01 1....... ........ */
            /* hive64.decode:133 */
            decode_extract_decode_Fmt_11(ctx, &u.f_decode11, insn);
            if (hive64_ldr_imm_update(ctx, &u.f_decode11)) return true;
            break;
        case 0x4:
            /* ...1010. ......10 0....... ........ */
            /* hive64.decode:134 */
            decode_extract_decode_Fmt_10(ctx, &u.f_decode10, insn);
            if (hive64_str_reg(ctx, &u.f_decode10)) return true;
            break;
        case 0x5:
            /* ...1010. ......10 1....... ........ */
            /* hive64.decode:135 */
            decode_extract_decode_Fmt_10(ctx, &u.f_decode10, insn);
            if (hive64_str_reg_update(ctx, &u.f_decode10)) return true;
            break;
        case 0x6:
            /* ...1010. ......11 0....... ........ */
            /* hive64.decode:136 */
            decode_extract_decode_Fmt_11(ctx, &u.f_decode11, insn);
            if (hive64_str_imm(ctx, &u.f_decode11)) return true;
            break;
        case 0x7:
            /* ...1010. ......11 1....... ........ */
            /* hive64.decode:137 */
            decode_extract_decode_Fmt_11(ctx, &u.f_decode11, insn);
            if (hive64_str_imm_update(ctx, &u.f_decode11)) return true;
            break;
        }
        break;
    case 0xb:
        /* ...1011. ........ ........ ........ */
        decode_extract_decode_Fmt_12(ctx, &u.f_decode12, insn);
        switch ((insn >> 17) & 0x1) {
        case 0x0:
            /* ...1011. ......0. ........ ........ */
            /* hive64.decode:138 */
            if (hive64_ldr_pc_rel(ctx, &u.f_decode12)) return true;
            break;
        case 0x1:
            /* ...1011. ......1. ........ ........ */
            /* hive64.decode:139 */
            if (hive64_str_pc_rel(ctx, &u.f_decode12)) return true;
            break;
        }
        break;
    case 0xc:
        /* ...1100. ........ ........ ........ */
        switch ((insn >> 20) & 0x1f) {
        case 0x0:
            /* ...11000 0000.... ........ ........ */
            /* hive64.decode:145 */
            decode_extract_decode_Fmt_13(ctx, &u.f_decode13, insn);
            if (hive64_cpuid(ctx, &u.f_decode13)) return true;
            break;
        case 0x1:
            /* ...11000 0001.... ........ ........ */
            /* hive64.decode:146 */
            decode_extract_decode_Fmt_14(ctx, &u.f_decode14, insn);
            if (hive64_brk(ctx, &u.f_decode14)) return true;
            break;
        case 0x2:
            /* ...11000 0010.... ........ ........ */
            /* hive64.decode:147 */
            decode_extract_decode_Fmt_15(ctx, &u.f_decode15, insn);
            if (hive64_zeroupper(ctx, &u.f_decode15)) return true;
            break;
        case 0x3:
            /* ...11000 0011.... ........ ........ */
            /* hive64.decode:148 */
            decode_extract_decode_Fmt_13(ctx, &u.f_decode13, insn);
            if (hive64_sret(ctx, &u.f_decode13)) return true;
            break;
        case 0x4:
            /* ...11000 0100.... ........ ........ */
            /* hive64.decode:149 */
            decode_extract_decode_Fmt_13(ctx, &u.f_decode13, insn);
            if (hive64_hret(ctx, &u.f_decode13)) return true;
            break;
        case 0x5:
            /* ...11000 0101.... ........ ........ */
            /* hive64.decode:150 */
            decode_extract_decode_Fmt_13(ctx, &u.f_decode13, insn);
            if (hive64_iret(ctx, &u.f_decode13)) return true;
            break;
        case 0x6:
            /* ...11000 0110.... ........ ........ */
            /* hive64.decode:151 */
            decode_extract_decode_Fmt_13(ctx, &u.f_decode13, insn);
            if (hive64_svc(ctx, &u.f_decode13)) return true;
            break;
        case 0x7:
            /* ...11000 0111.... ........ ........ */
            /* hive64.decode:152 */
            decode_extract_decode_Fmt_16(ctx, &u.f_decode16, insn);
            if (hive64_mov_cr_r(ctx, &u.f_decode16)) return true;
            break;
        case 0x8:
            /* ...11000 1000.... ........ ........ */
            /* hive64.decode:153 */
            decode_extract_decode_Fmt_16(ctx, &u.f_decode16, insn);
            if (hive64_mov_r_cr(ctx, &u.f_decode16)) return true;
            break;
        case 0x9:
            /* ...11000 1001.... ........ ........ */
            /* hive64.decode:154 */
            decode_extract_decode_Fmt_13(ctx, &u.f_decode13, insn);
            if (hive64_hexit(ctx, &u.f_decode13)) return true;
            break;
        case 0xa:
            /* ...11000 1010.... ........ ........ */
            /* hive64.decode:155 */
            decode_extract_decode_Fmt_13(ctx, &u.f_decode13, insn);
            if (hive64_sexit(ctx, &u.f_decode13)) return true;
            break;
        case 0x10:
            /* ...11001 0000.... ........ ........ */
            decode_extract_decode_Fmt_17(ctx, &u.f_decode17, insn);
            switch (insn & 0x000c8000) {
            case 0x00000000:
                /* ...11001 000000.. 0....... ........ */
                /* hive64.decode:157 */
                if (hive64_fadd(ctx, &u.f_decode17)) return true;
                break;
            case 0x00040000:
                /* ...11001 000001.. 0....... ........ */
                /* hive64.decode:169 */
                if (hive64_dadd(ctx, &u.f_decode17)) return true;
                break;
            case 0x00080000:
                /* ...11001 000010.. 0....... ........ */
                /* hive64.decode:158 */
                if (hive64_fsub(ctx, &u.f_decode17)) return true;
                break;
            case 0x00088000:
                /* ...11001 000010.. 1....... ........ */
                /* hive64.decode:159 */
                if (hive64_fcmp(ctx, &u.f_decode17)) return true;
                break;
            case 0x000c0000:
                /* ...11001 000011.. 0....... ........ */
                /* hive64.decode:170 */
                if (hive64_dsub(ctx, &u.f_decode17)) return true;
                break;
            case 0x000c8000:
                /* ...11001 000011.. 1....... ........ */
                /* hive64.decode:171 */
                if (hive64_dcmp(ctx, &u.f_decode17)) return true;
                break;
            }
            break;
        case 0x11:
            /* ...11001 0001.... ........ ........ */
            decode_extract_decode_Fmt_17(ctx, &u.f_decode17, insn);
            switch (insn & 0x000c8000) {
            case 0x00000000:
                /* ...11001 000100.. 0....... ........ */
                /* hive64.decode:160 */
                if (hive64_fmul(ctx, &u.f_decode17)) return true;
                break;
            case 0x00040000:
                /* ...11001 000101.. 0....... ........ */
                /* hive64.decode:172 */
                if (hive64_dmul(ctx, &u.f_decode17)) return true;
                break;
            case 0x00080000:
                /* ...11001 000110.. 0....... ........ */
                /* hive64.decode:161 */
                if (hive64_fdiv(ctx, &u.f_decode17)) return true;
                break;
            case 0x000c0000:
                /* ...11001 000111.. 0....... ........ */
                /* hive64.decode:173 */
                if (hive64_ddiv(ctx, &u.f_decode17)) return true;
                break;
            }
            break;
        case 0x12:
            /* ...11001 0010.... ........ ........ */
            switch (insn & 0x000c8000) {
            case 0x00000000:
                /* ...11001 001000.. 0....... ........ */
                /* hive64.decode:162 */
                decode_extract_decode_Fmt_17(ctx, &u.f_decode17, insn);
                if (hive64_fmod(ctx, &u.f_decode17)) return true;
                break;
            case 0x00040000:
                /* ...11001 001001.. 0....... ........ */
                /* hive64.decode:174 */
                decode_extract_decode_Fmt_17(ctx, &u.f_decode17, insn);
                if (hive64_dmod(ctx, &u.f_decode17)) return true;
                break;
            case 0x00080000:
                /* ...11001 001010.. 0....... ........ */
                decode_extract_decode_Fmt_18(ctx, &u.f_decode18, insn);
                switch ((insn >> 16) & 0x1) {
                case 0x0:
                    /* ...11001 001010.0 0....... ........ */
                    /* hive64.decode:163 */
                    if (hive64_i2f(ctx, &u.f_decode18)) return true;
                    break;
                case 0x1:
                    /* ...11001 001010.1 0....... ........ */
                    /* hive64.decode:164 */
                    if (hive64_f2i(ctx, &u.f_decode18)) return true;
                    break;
                }
                break;
            case 0x000c0000:
                /* ...11001 001011.. 0....... ........ */
                decode_extract_decode_Fmt_18(ctx, &u.f_decode18, insn);
                switch ((insn >> 16) & 0x1) {
                case 0x0:
                    /* ...11001 001011.0 0....... ........ */
                    /* hive64.decode:175 */
                    if (hive64_i2d(ctx, &u.f_decode18)) return true;
                    break;
                case 0x1:
                    /* ...11001 001011.1 0....... ........ */
                    /* hive64.decode:176 */
                    if (hive64_d2i(ctx, &u.f_decode18)) return true;
                    break;
                }
                break;
            }
            break;
        case 0x13:
            /* ...11001 0011.... ........ ........ */
            decode_extract_decode_Fmt_18(ctx, &u.f_decode18, insn);
            switch (insn & 0x000c8000) {
            case 0x00000000:
                /* ...11001 001100.. 0....... ........ */
                /* hive64.decode:165 */
                if (hive64_fsin(ctx, &u.f_decode18)) return true;
                break;
            case 0x00040000:
                /* ...11001 001101.. 0....... ........ */
                /* hive64.decode:177 */
                if (hive64_dsin(ctx, &u.f_decode18)) return true;
                break;
            case 0x00080000:
                /* ...11001 001110.. 0....... ........ */
                /* hive64.decode:166 */
                if (hive64_fsqrt(ctx, &u.f_decode18)) return true;
                break;
            case 0x000c0000:
                /* ...11001 001111.. 0....... ........ */
                /* hive64.decode:178 */
                if (hive64_dsqrt(ctx, &u.f_decode18)) return true;
                break;
            }
            break;
        case 0x14:
            /* ...11001 0100.... ........ ........ */
            decode_extract_decode_Fmt_18(ctx, &u.f_decode18, insn);
            switch (insn & 0x000c8000) {
            case 0x00000000:
                /* ...11001 010000.. 0....... ........ */
                /* hive64.decode:167 */
                if (hive64_f2d(ctx, &u.f_decode18)) return true;
                break;
            case 0x00040000:
                /* ...11001 010001.. 0....... ........ */
                /* hive64.decode:179 */
                if (hive64_d2f(ctx, &u.f_decode18)) return true;
                break;
            }
            break;
        }
        break;
    case 0xd:
        /* ...1101. ........ ........ ........ */
        switch ((insn >> 22) & 0x7) {
        case 0x2:
            /* ...11010 10...... ........ ........ */
            /* hive64.decode:181 */
            decode_extract_decode_Fmt_19(ctx, &u.f_decode19, insn);
            if (hive64_cswp(ctx, &u.f_decode19)) return true;
            break;
        case 0x3:
            /* ...11010 11...... ........ ........ */
            /* hive64.decode:182 */
            decode_extract_decode_Fmt_6(ctx, &u.f_decode6, insn);
            if (hive64_xchg(ctx, &u.f_decode6)) return true;
            break;
        }
        break;
    case 0xe:
        /* ...1110. ........ ........ ........ */
        decode_extract_decode_Fmt_20(ctx, &u.f_decode20, insn);
        switch ((insn >> 22) & 0x7) {
        case 0x0:
            /* ...11100 00...... ........ ........ */
            /* hive64.decode:184 */
            if (hive64_ubxt(ctx, &u.f_decode20)) return true;
            break;
        case 0x1:
            /* ...11100 01...... ........ ........ */
            /* hive64.decode:185 */
            if (hive64_sbxt(ctx, &u.f_decode20)) return true;
            break;
        case 0x2:
            /* ...11100 10...... ........ ........ */
            /* hive64.decode:186 */
            if (hive64_ubdp(ctx, &u.f_decode20)) return true;
            break;
        case 0x3:
            /* ...11100 11...... ........ ........ */
            /* hive64.decode:187 */
            if (hive64_sbdp(ctx, &u.f_decode20)) return true;
            break;
        }
        break;
    case 0xf:
        /* ...1111. ........ ........ ........ */
        switch ((insn >> 19) & 0x3f) {
        case 0x20:
            /* ...11111 00000... ........ ........ */
            /* hive64.decode:190 */
            decode_extract_decode_Fmt_21(ctx, &u.f_decode21, insn);
            if (hive64_vadd(ctx, &u.f_decode21)) return true;
            break;
        case 0x21:
            /* ...11111 00001... ........ ........ */
            /* hive64.decode:191 */
            decode_extract_decode_Fmt_21(ctx, &u.f_decode21, insn);
            if (hive64_vsub(ctx, &u.f_decode21)) return true;
            break;
        case 0x22:
            /* ...11111 00010... ........ ........ */
            /* hive64.decode:192 */
            decode_extract_decode_Fmt_21(ctx, &u.f_decode21, insn);
            if (hive64_vmul(ctx, &u.f_decode21)) return true;
            break;
        case 0x23:
            /* ...11111 00011... ........ ........ */
            /* hive64.decode:193 */
            decode_extract_decode_Fmt_21(ctx, &u.f_decode21, insn);
            if (hive64_vdiv(ctx, &u.f_decode21)) return true;
            break;
        case 0x24:
            /* ...11111 00100... ........ ........ */
            /* hive64.decode:194 */
            decode_extract_decode_Fmt_21(ctx, &u.f_decode21, insn);
            if (hive64_vaddsub(ctx, &u.f_decode21)) return true;
            break;
        case 0x25:
            /* ...11111 00101... ........ ........ */
            /* hive64.decode:195 */
            decode_extract_decode_Fmt_21(ctx, &u.f_decode21, insn);
            if (hive64_vmadd(ctx, &u.f_decode21)) return true;
            break;
        case 0x26:
            /* ...11111 00110... ........ ........ */
            decode_extract_decode_Fmt_22(ctx, &u.f_decode22, insn);
            switch ((insn >> 11) & 0x1) {
            case 0x0:
                /* ...11111 00110... ....0... ........ */
                /* hive64.decode:196 */
                if (hive64_vmov_reg(ctx, &u.f_decode22)) return true;
                break;
            case 0x1:
                /* ...11111 00110... ....1... ........ */
                /* hive64.decode:197 */
                if (hive64_vmov_reg2(ctx, &u.f_decode22)) return true;
                break;
            }
            break;
        case 0x27:
            /* ...11111 00111... ........ ........ */
            /* hive64.decode:198 */
            decode_extract_decode_Fmt_23(ctx, &u.f_decode23, insn);
            if (hive64_vmov(ctx, &u.f_decode23)) return true;
            break;
        case 0x28:
            /* ...11111 01000... ........ ........ */
            /* hive64.decode:199 */
            decode_extract_decode_Fmt_24(ctx, &u.f_decode24, insn);
            if (hive64_vconv(ctx, &u.f_decode24)) return true;
            break;
        case 0x29:
            /* ...11111 01001... ........ ........ */
            /* hive64.decode:200 */
            decode_extract_decode_Fmt_25(ctx, &u.f_decode25, insn);
            if (hive64_vlen(ctx, &u.f_decode25)) return true;
            break;
        case 0x2a:
            /* ...11111 01010... ........ ........ */
            switch ((insn >> 17) & 0x3) {
            case 0x0:
                /* ...11111 0101000. ........ ........ */
                /* hive64.decode:205 */
                decode_extract_decode_Fmt_27(ctx, &u.f_decode27, insn);
                if (hive64_vldr_reg(ctx, &u.f_decode27)) return true;
                break;
            case 0x1:
                /* ...11111 0101001. ........ ........ */
                /* hive64.decode:206 */
                decode_extract_decode_Fmt_27(ctx, &u.f_decode27, insn);
                if (hive64_vldr_reg_update(ctx, &u.f_decode27)) return true;
                break;
            case 0x2:
                /* ...11111 0101010. ........ ........ */
                /* hive64.decode:201 */
                decode_extract_decode_Fmt_26(ctx, &u.f_decode26, insn);
                if (hive64_vldr_imm(ctx, &u.f_decode26)) return true;
                break;
            case 0x3:
                /* ...11111 0101011. ........ ........ */
                /* hive64.decode:202 */
                decode_extract_decode_Fmt_26(ctx, &u.f_decode26, insn);
                if (hive64_vldr_imm_update(ctx, &u.f_decode26)) return true;
                break;
            }
            break;
        case 0x2b:
            /* ...11111 01011... ........ ........ */
            switch ((insn >> 17) & 0x3) {
            case 0x0:
                /* ...11111 0101100. ........ ........ */
                /* hive64.decode:207 */
                decode_extract_decode_Fmt_27(ctx, &u.f_decode27, insn);
                if (hive64_vstr_reg(ctx, &u.f_decode27)) return true;
                break;
            case 0x1:
                /* ...11111 0101101. ........ ........ */
                /* hive64.decode:208 */
                decode_extract_decode_Fmt_27(ctx, &u.f_decode27, insn);
                if (hive64_vstr_reg_update(ctx, &u.f_decode27)) return true;
                break;
            case 0x2:
                /* ...11111 0101110. ........ ........ */
                /* hive64.decode:203 */
                decode_extract_decode_Fmt_26(ctx, &u.f_decode26, insn);
                if (hive64_vstr_imm(ctx, &u.f_decode26)) return true;
                break;
            case 0x3:
                /* ...11111 0101111. ........ ........ */
                /* hive64.decode:204 */
                decode_extract_decode_Fmt_26(ctx, &u.f_decode26, insn);
                if (hive64_vstr_imm_update(ctx, &u.f_decode26)) return true;
                break;
            }
            break;
        case 0x2c:
            /* ...11111 01100... ........ ........ */
            /* hive64.decode:209 */
            decode_extract_decode_Fmt_21(ctx, &u.f_decode21, insn);
            if (hive64_vand(ctx, &u.f_decode21)) return true;
            break;
        case 0x2d:
            /* ...11111 01101... ........ ........ */
            /* hive64.decode:210 */
            decode_extract_decode_Fmt_21(ctx, &u.f_decode21, insn);
            if (hive64_vor(ctx, &u.f_decode21)) return true;
            break;
        case 0x2e:
            /* ...11111 01110... ........ ........ */
            /* hive64.decode:211 */
            decode_extract_decode_Fmt_21(ctx, &u.f_decode21, insn);
            if (hive64_vxor(ctx, &u.f_decode21)) return true;
            break;
        case 0x2f:
            /* ...11111 01111... ........ ........ */
            /* hive64.decode:212 */
            decode_extract_decode_Fmt_28(ctx, &u.f_decode28, insn);
            if (hive64_vcmp(ctx, &u.f_decode28)) return true;
            break;
        case 0x30:
            /* ...11111 10000... ........ ........ */
            /* hive64.decode:213 */
            decode_extract_decode_Fmt_29(ctx, &u.f_decode29, insn);
            if (hive64_vminmax(ctx, &u.f_decode29)) return true;
            break;
        case 0x31:
            /* ...11111 10001... ........ ........ */
            /* hive64.decode:214 */
            decode_extract_decode_Fmt_23(ctx, &u.f_decode23, insn);
            if (hive64_vabs(ctx, &u.f_decode23)) return true;
            break;
        case 0x32:
            /* ...11111 10010... ........ ........ */
            /* hive64.decode:215 */
            decode_extract_decode_Fmt_21(ctx, &u.f_decode21, insn);
            if (hive64_vshl(ctx, &u.f_decode21)) return true;
            break;
        case 0x33:
            /* ...11111 10011... ........ ........ */
            /* hive64.decode:216 */
            decode_extract_decode_Fmt_30(ctx, &u.f_decode30, insn);
            if (hive64_vshr(ctx, &u.f_decode30)) return true;
            break;
        case 0x34:
            /* ...11111 10100... ........ ........ */
            /* hive64.decode:217 */
            decode_extract_decode_Fmt_23(ctx, &u.f_decode23, insn);
            if (hive64_vsqrt(ctx, &u.f_decode23)) return true;
            break;
        case 0x35:
            /* ...11111 10101... ........ ........ */
            /* hive64.decode:218 */
            decode_extract_decode_Fmt_21(ctx, &u.f_decode21, insn);
            if (hive64_vmod(ctx, &u.f_decode21)) return true;
            break;
        case 0x36:
            /* ...11111 10110... ........ ........ */
            /* hive64.decode:219 */
            decode_extract_decode_Fmt_31(ctx, &u.f_decode31, insn);
            if (hive64_vmovall(ctx, &u.f_decode31)) return true;
            break;
        case 0x37:
            /* ...11111 10111... ........ ........ */
            /* hive64.decode:220 */
            decode_extract_decode_Fmt_28(ctx, &u.f_decode28, insn);
            if (hive64_vtst(ctx, &u.f_decode28)) return true;
            break;
        }
        break;
    }
    return false;
}
